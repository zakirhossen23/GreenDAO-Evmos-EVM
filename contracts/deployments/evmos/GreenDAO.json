{
  "address": "0x028350D8Bc89F8861F9ca5DD86f591F19E4A5dee",
  "abi": [
    {
      "inputs": [],
      "name": "_approveRequiredMsgs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_dao_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_dao_uris",
      "outputs": [
        {
          "internalType": "string",
          "name": "dao_wallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "dao_uri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "finished",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_goal_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_goal_uris",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "dao_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "goal_uri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_ideas_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_ideas_uris",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "goal_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "ideas_uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "donation",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_ideas_vote_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_message_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_reply_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_smart_contract_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_smart_contracts_uris",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "smart_contract_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "smart_contract_uri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_doantion",
          "type": "uint256"
        }
      ],
      "name": "add_donation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "all_goal_ideas_votes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "goal_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "wallet",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "all_messages",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "message_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "all_replies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reply_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "message_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_dao_wallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_dao_uri",
          "type": "string"
        }
      ],
      "name": "create_dao",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_goal_uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_dao_id",
          "type": "uint256"
        }
      ],
      "name": "create_goal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_wallet",
          "type": "string"
        }
      ],
      "name": "create_goal_ideas_vote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ideas_uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "_smart_contracts",
          "type": "string[]"
        }
      ],
      "name": "create_ideas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dao_id",
          "type": "uint256"
        }
      ],
      "name": "dao_uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_idea_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "donate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "donated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractRewards",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "denom",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "precision",
              "type": "uint8"
            }
          ],
          "internalType": "struct DecCoin[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDelegation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ideas_id",
          "type": "uint256"
        }
      ],
      "name": "getMsgIDs",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "message_id",
          "type": "uint256"
        }
      ],
      "name": "getReplyIDs",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUnbondingDelegation",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int64",
              "name": "creationHeight",
              "type": "int64"
            },
            {
              "internalType": "int64",
              "name": "completionTime",
              "type": "int64"
            },
            {
              "internalType": "uint256",
              "name": "initialBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ],
          "internalType": "struct UnbondingDelegationEntry[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_all_daos",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_all_goals",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dao_id",
          "type": "uint256"
        }
      ],
      "name": "get_all_goals_by_dao_id",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_all_ideas",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        }
      ],
      "name": "get_all_ideas_by_goal_id",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_goal_uri",
          "type": "string"
        }
      ],
      "name": "get_goal_id_by_goal_uri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ideas_uri",
          "type": "string"
        }
      ],
      "name": "get_goal_id_from_ideas_uri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ideas_uri",
          "type": "string"
        }
      ],
      "name": "get_ideas_id_by_ideas_uri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        }
      ],
      "name": "get_ideas_votes_from_goal",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        }
      ],
      "name": "goal_uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        }
      ],
      "name": "ideas_uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_idea_id",
          "type": "uint256"
        }
      ],
      "name": "redeemDonatedMoney",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reset_all",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        }
      ],
      "name": "sendMsg",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_message_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_reply",
          "type": "string"
        }
      ],
      "name": "sendReply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dao_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_dao_wallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_dao_uri",
          "type": "string"
        }
      ],
      "name": "set_dao",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_goal_uri",
          "type": "string"
        }
      ],
      "name": "set_goal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_ideas_uri",
          "type": "string"
        }
      ],
      "name": "set_ideas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAllMoney",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd3277f084e65206bb094bec97769ade6a9920841357ead4e4b2a91d6b95bc370",
  "receipt": {
    "to": null,
    "from": "0xa41778cDBefa941beD7dd6ac25Ff0a4ADd79B677",
    "contractAddress": "0x028350D8Bc89F8861F9ca5DD86f591F19E4A5dee",
    "transactionIndex": 0,
    "gasUsed": "4553624",
    "logsBloom": "0x
    "blockHash": "0xb74c78e4f2e66cd3671bcd099fd6cebce311235d79c920dd89244754b78de575",
    "transactionHash": "0xd3277f084e65206bb094bec97769ade6a9920841357ead4e4b2a91d6b95bc370",
    "logs": [],
    "blockNumber": 14484575,
    "cumulativeGasUsed": "4553624",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6cc7b9bf0a6e639452a551eeb3b69341",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"_approveRequiredMsgs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dao_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dao_uris\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"dao_wallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dao_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"finished\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_goal_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_goal_uris\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dao_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"goal_uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ideas_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_ideas_uris\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"goal_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ideas_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"donation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ideas_vote_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_message_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reply_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_smart_contract_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_smart_contracts_uris\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"smart_contract_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"smart_contract_uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_doantion\",\"type\":\"uint256\"}],\"name\":\"add_donation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"all_goal_ideas_votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"goal_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"wallet\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"all_messages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"message_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"all_replies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reply_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"message_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_dao_wallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_dao_uri\",\"type\":\"string\"}],\"name\":\"create_dao\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_goal_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_dao_id\",\"type\":\"uint256\"}],\"name\":\"create_goal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_wallet\",\"type\":\"string\"}],\"name\":\"create_goal_ideas_vote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"_smart_contracts\",\"type\":\"string[]\"}],\"name\":\"create_ideas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dao_id\",\"type\":\"uint256\"}],\"name\":\"dao_uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idea_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"donated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"precision\",\"type\":\"uint8\"}],\"internalType\":\"struct DecCoin[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDelegation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ideas_id\",\"type\":\"uint256\"}],\"name\":\"getMsgIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"message_id\",\"type\":\"uint256\"}],\"name\":\"getReplyIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnbondingDelegation\",\"outputs\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"creationHeight\",\"type\":\"int64\"},{\"internalType\":\"int64\",\"name\":\"completionTime\",\"type\":\"int64\"},{\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct UnbondingDelegationEntry[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_all_daos\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_all_goals\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dao_id\",\"type\":\"uint256\"}],\"name\":\"get_all_goals_by_dao_id\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_all_ideas\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"}],\"name\":\"get_all_ideas_by_goal_id\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_goal_uri\",\"type\":\"string\"}],\"name\":\"get_goal_id_by_goal_uri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"}],\"name\":\"get_goal_id_from_ideas_uri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"}],\"name\":\"get_ideas_id_by_ideas_uri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"}],\"name\":\"get_ideas_votes_from_goal\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"}],\"name\":\"goal_uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"}],\"name\":\"ideas_uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idea_id\",\"type\":\"uint256\"}],\"name\":\"redeemDonatedMoney\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reset_all\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"sendMsg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_message_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_reply\",\"type\":\"string\"}],\"name\":\"sendReply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dao_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_dao_wallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_dao_uri\",\"type\":\"string\"}],\"name\":\"set_dao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_goal_uri\",\"type\":\"string\"}],\"name\":\"set_goal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"}],\"name\":\"set_ideas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllMoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_approveRequiredMsgs()\":{\"details\":\"approves the staking and distribution contracts for donating\"}},\"stateVariables\":{\"donated\":{\"details\":\"map to keep track of user deposits to the contract.\"},\"stakingMethods\":{\"details\":\"the required authorizations for Staking and Distribution\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GreenDAO.sol\":\"GreenDAO\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/GreenDAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"./precompiles/stateful/Staking.sol\\\";\\r\\nimport \\\"./precompiles/stateful/Distribution.sol\\\";\\r\\ncontract GreenDAO  {\\r\\n    struct dao_uri_struct {\\r\\n        string dao_wallet;\\r\\n        string dao_uri;\\r\\n        string finished;\\r\\n    }\\r\\n    struct goal_uri_struct {\\r\\n        uint256 dao_id;\\r\\n        string goal_uri;\\r\\n    }\\r\\n\\r\\n    struct ideas_uri_struct {\\r\\n        uint256 goal_id;\\r\\n        string ideas_uri;\\r\\n        uint256 donation;\\r\\n    }\\r\\n    struct smart_contract_uri_struct {\\r\\n        uint256 smart_contract_id;\\r\\n        uint256 ideas_id;\\r\\n        string smart_contract_uri;\\r\\n    }\\r\\n    struct goal_ideas_votes_struct {\\r\\n        uint256 goal_id;\\r\\n        uint256 ideas_id;\\r\\n        string wallet;\\r\\n    }\\r\\n    struct message_struct {\\r\\n        uint256 message_id;\\r\\n        uint256 ideas_id;\\r\\n        string message;\\r\\n    }\\r\\n    struct reply_struct {\\r\\n        uint256 reply_id;\\r\\n        uint256 message_id;\\r\\n        string message;\\r\\n    }\\r\\n    /// @dev the required authorizations for Staking and Distribution\\r\\n    string[] private stakingMethods = [MSG_DELEGATE, MSG_UNDELEGATE, MSG_REDELEGATE];\\r\\n    string[] private distributionMethods = [MSG_WITHDRAW_DELEGATOR_REWARD];\\r\\n    /// @dev map to keep track of user deposits to the contract.\\r\\n    mapping(uint256 => uint256) public donated;                                // _ideas_ids       => (Ideas) donated amount\\r\\n    uint256 private _total_delegations;\\r\\n    string private _validatorAddr  = \\\"evmosvaloper158wwas4v6fgcu2x3plg70s6u0fm0lle237kltr\\\";\\r\\n\\r\\n\\r\\n    uint256 public _dao_ids;\\r\\n    uint256 public _goal_ids;\\r\\n    uint256 public _ideas_ids;\\r\\n    uint256 public _smart_contract_ids;\\r\\n    uint256 public _ideas_vote_ids;\\r\\n    uint256 public _message_ids;\\r\\n    uint256 public _reply_ids;\\r\\n    mapping(uint256 => dao_uri_struct) public _dao_uris; //_dao_ids              => (Dao)                    Dao Wallet + Dao URI   + Finished\\r\\n    mapping(uint256 => goal_uri_struct) public _goal_uris; //_goal_ids             => (Goal)                   Dao ID + Goal URI\\r\\n    mapping(uint256 => ideas_uri_struct) public _ideas_uris; //_ideas_ids            => (Ideas)                  Goal ID + Ideas URI\\r\\n    mapping(uint256 => smart_contract_uri_struct) public _smart_contracts_uris; //_smart_contract_ids   => (Ideas Smart contract)   Goal ID + Ideas URI\\r\\n    mapping(uint256 => goal_ideas_votes_struct) public all_goal_ideas_votes; //_ideas_vote_ids       => (Vote)                   Goal ID + Ideas ID + Wallet\\r\\n\\r\\n    mapping(uint256 => message_struct) public all_messages; // all_messages        => _message_ids + message_struct\\r\\n\\r\\n    mapping(uint256 => reply_struct) public all_replies; // all_messages        => _reply_ids + reply_struct\\r\\n\\r\\n    //Daos\\r\\n    function create_dao(\\r\\n        string memory _dao_wallet,\\r\\n        string memory _dao_uri\\r\\n    ) public returns (uint256) {\\r\\n        //Create Dao into _dao_uris\\r\\n        _dao_uris[_dao_ids] = dao_uri_struct(_dao_wallet, _dao_uri, \\\"False\\\");\\r\\n        _dao_ids++;\\r\\n\\r\\n        return _dao_ids;\\r\\n    }\\r\\n\\r\\n    function set_dao(\\r\\n        uint256 _dao_id,\\r\\n        string memory _dao_wallet,\\r\\n        string memory _dao_uri\\r\\n    ) public {\\r\\n        //Set Dao of wallet and uri\\r\\n        _dao_uris[_dao_id].dao_wallet = _dao_wallet;\\r\\n        _dao_uris[_dao_id].dao_uri = _dao_uri;\\r\\n    }\\r\\n\\r\\n    function get_all_daos() public view returns (string[] memory) {\\r\\n        //Getting all doas\\r\\n        string[] memory _StoreInfo = new string[](_dao_ids);\\r\\n        for (uint256 i = 0; i < _dao_ids; i++) {\\r\\n            _StoreInfo[i] = _dao_uris[i].dao_uri;\\r\\n        }\\r\\n\\r\\n        return _StoreInfo;\\r\\n    }\\r\\n\\r\\n    function dao_uri(uint256 _dao_id) public view returns (string memory) {\\r\\n        //Getting one dao URI\\r\\n        return _dao_uris[_dao_id].dao_uri;\\r\\n    }\\r\\n\\r\\n    //Goals\\r\\n    function create_goal(\\r\\n        string memory _goal_uri,\\r\\n        uint256 _dao_id\\r\\n    ) public returns (uint256) {\\r\\n        //Create goal into _goal_uris\\r\\n        _goal_uris[_goal_ids] = goal_uri_struct(_dao_id, _goal_uri);\\r\\n        _goal_ids++;\\r\\n\\r\\n        return _goal_ids;\\r\\n    }\\r\\n\\r\\n    function set_goal(uint256 _goal_id, string memory _goal_uri) public {\\r\\n        //Set goal uri\\r\\n        _goal_uris[_goal_id].goal_uri = _goal_uri;\\r\\n    }\\r\\n\\r\\n    function get_all_goals() public view returns (string[] memory) {\\r\\n        //Getting all goals\\r\\n        string[] memory _StoreInfo = new string[](_goal_ids);\\r\\n        for (uint256 i = 0; i < _goal_ids; i++) {\\r\\n            _StoreInfo[i] = _goal_uris[i].goal_uri;\\r\\n        }\\r\\n\\r\\n        return _StoreInfo;\\r\\n    }\\r\\n\\r\\n    function get_all_goals_by_dao_id(\\r\\n        uint256 _dao_id\\r\\n    ) public view returns (string[] memory) {\\r\\n        //Getting all goals by dao id\\r\\n        string[] memory _StoreInfo = new string[](_goal_ids);\\r\\n        uint256 _store_id;\\r\\n        for (uint256 i = 0; i < _goal_ids; i++) {\\r\\n            if (_goal_uris[i].dao_id == _dao_id) {\\r\\n                _StoreInfo[_store_id] = _goal_uris[i].goal_uri;\\r\\n                _store_id++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return _StoreInfo;\\r\\n    }\\r\\n\\r\\n    function get_goal_id_by_goal_uri(\\r\\n        string memory _goal_uri\\r\\n    ) public view returns (uint256) {\\r\\n        //Getting goal id by uri\\r\\n        for (uint256 i = 0; i < _goal_ids; i++) {\\r\\n            if (\\r\\n                keccak256(bytes(_goal_uris[i].goal_uri)) ==\\r\\n                keccak256(bytes(_goal_uri))\\r\\n            ) return i;\\r\\n        }\\r\\n\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function goal_uri(uint256 _goal_id) public view returns (string memory) {\\r\\n        //Getting one goal URI\\r\\n        return _goal_uris[_goal_id].goal_uri;\\r\\n    }\\r\\n\\r\\n    //Ideas\\r\\n    function create_ideas(\\r\\n        string memory _ideas_uri,\\r\\n        uint256 _goal_id,\\r\\n        string[] memory _smart_contracts\\r\\n    ) public returns (uint256) {\\r\\n        //Create ideas into _ideas_uris\\r\\n        _ideas_uris[_ideas_ids] = ideas_uri_struct(_goal_id, _ideas_uri, 0);\\r\\n        _ideas_ids++;\\r\\n\\r\\n        for (uint256 i = 0; i < _smart_contracts.length; i++) {\\r\\n            create_ideas_smart_contract(\\r\\n                _ideas_ids,\\r\\n                _smart_contract_ids,\\r\\n                _smart_contracts[i]\\r\\n            );\\r\\n            _smart_contract_ids++;\\r\\n        }\\r\\n\\r\\n        return _ideas_ids;\\r\\n    }\\r\\n\\r\\n    function create_ideas_smart_contract(\\r\\n        uint256 _ideas_id,\\r\\n        uint256 _smart_contract_id,\\r\\n        string memory _smart_contract\\r\\n    ) private {\\r\\n        _smart_contracts_uris[_smart_contract_id] = smart_contract_uri_struct(\\r\\n            _ideas_id,\\r\\n            _smart_contract_id,\\r\\n            _smart_contract\\r\\n        );\\r\\n        \\r\\n    }\\r\\n\\r\\n    function set_ideas(uint256 _ideas_id, string memory _ideas_uri) public {\\r\\n        //Set ideas uri\\r\\n        _ideas_uris[_ideas_id].ideas_uri = _ideas_uri;\\r\\n    }\\r\\n\\r\\n    function add_donation(uint256 _ideas_id, uint256 _doantion) public {\\r\\n        //Set ideas uri\\r\\n        _ideas_uris[_ideas_id].donation += _doantion;\\r\\n    }\\r\\n\\r\\n    function get_all_ideas() public view returns (string[] memory) {\\r\\n        //Getting all ideas\\r\\n        string[] memory _StoreInfo = new string[](_ideas_ids);\\r\\n        for (uint256 i = 0; i < _ideas_ids; i++) {\\r\\n            _StoreInfo[i] = _ideas_uris[i].ideas_uri;\\r\\n        }\\r\\n\\r\\n        return _StoreInfo;\\r\\n    }\\r\\n\\r\\n    function get_all_ideas_by_goal_id(\\r\\n        uint256 _goal_id\\r\\n    ) public view returns (string[] memory) {\\r\\n        //Getting all ideas by goal id\\r\\n        string[] memory _StoreInfo = new string[](_ideas_ids);\\r\\n        uint256 _store_id;\\r\\n        for (uint256 i = 0; i < _ideas_ids; i++) {\\r\\n            if (_ideas_uris[i].goal_id == _goal_id)\\r\\n                _StoreInfo[_store_id] = _ideas_uris[i].ideas_uri;\\r\\n            _store_id++;\\r\\n        }\\r\\n\\r\\n        return _StoreInfo;\\r\\n    }\\r\\n\\r\\n    function get_ideas_id_by_ideas_uri(\\r\\n        string memory _ideas_uri\\r\\n    ) public view returns (uint256) {\\r\\n        //Getting ideas id by uri\\r\\n        for (uint256 i = 0; i < _ideas_ids; i++) {\\r\\n            if (\\r\\n                keccak256(bytes(_ideas_uris[i].ideas_uri)) ==\\r\\n                keccak256(bytes(_ideas_uri))\\r\\n            ) return i;\\r\\n        }\\r\\n\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function get_goal_id_from_ideas_uri(\\r\\n        string memory _ideas_uri\\r\\n    ) public view returns (uint256) {\\r\\n        //Getting ideas id by uri\\r\\n        for (uint256 i = 0; i < _ideas_ids; i++) {\\r\\n            if (\\r\\n                keccak256(bytes(_ideas_uris[i].ideas_uri)) ==\\r\\n                keccak256(bytes(_ideas_uri))\\r\\n            ) return _ideas_uris[i].goal_id;\\r\\n        }\\r\\n\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function ideas_uri(uint256 _ideas_id) public view returns (string memory) {\\r\\n        //Getting one ideas URI\\r\\n        return _ideas_uris[_ideas_id].ideas_uri;\\r\\n    }\\r\\n\\r\\n    //Votes\\r\\n    function create_goal_ideas_vote(\\r\\n        uint256 _goal_id,\\r\\n        uint256 _ideas_id,\\r\\n        string memory _wallet\\r\\n    ) public returns (uint256) {\\r\\n        //Create votes into all_goal_ideas_votes\\r\\n        all_goal_ideas_votes[_ideas_vote_ids] = goal_ideas_votes_struct(\\r\\n            _goal_id,\\r\\n            _ideas_id,\\r\\n            _wallet\\r\\n        );\\r\\n        _ideas_vote_ids++;\\r\\n\\r\\n        return _ideas_vote_ids;\\r\\n    }\\r\\n\\r\\n    function get_ideas_votes_from_goal(\\r\\n        uint256 _goal_id,\\r\\n        uint256 _ideas_id\\r\\n    ) public view returns (string[] memory) {\\r\\n        //gets all ideas votes from goal\\r\\n        string[] memory _StoreInfo = new string[](_ideas_vote_ids);\\r\\n        uint256 _store_id;\\r\\n        for (uint256 i = 0; i < _ideas_vote_ids; i++) {\\r\\n            if (\\r\\n                all_goal_ideas_votes[i].goal_id == _goal_id &&\\r\\n                all_goal_ideas_votes[i].ideas_id == _ideas_id\\r\\n            ) _StoreInfo[_store_id] = all_goal_ideas_votes[i].wallet;\\r\\n            _store_id++;\\r\\n        }\\r\\n        return _StoreInfo;\\r\\n    }\\r\\n    \\r\\n    //Messages\\r\\n     function sendMsg(\\r\\n        uint256 _ideas_id,\\r\\n        string memory _message\\r\\n    ) public returns (uint256) {\\r\\n        //Create messsage into all_messages\\r\\n        all_messages[_message_ids] = message_struct(\\r\\n            _message_ids,\\r\\n            _ideas_id,\\r\\n            _message\\r\\n        );\\r\\n        _message_ids++;\\r\\n\\r\\n        return _message_ids;\\r\\n    }\\r\\n   \\r\\n\\r\\n    function getMsgIDs(\\r\\n        uint256 ideas_id\\r\\n    ) public view returns (uint256[] memory ) {\\r\\n        //Getting all messages ids by idea id\\r\\n        uint256[] memory _All_Ideas_Messages = new uint256[](_message_ids);\\r\\n        uint256 _msg_id;\\r\\n        for (uint256 i = 0; i < _message_ids; i++) {\\r\\n            if (all_messages[i].ideas_id == ideas_id) {\\r\\n                _All_Ideas_Messages[_msg_id] = all_messages[i].message_id;\\r\\n                _msg_id++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return _All_Ideas_Messages;\\r\\n    }\\r\\n    function sendReply(\\r\\n        uint256 _message_id,\\r\\n        string memory _reply\\r\\n    ) public returns (uint256) {\\r\\n        //Create reply into all_replies\\r\\n        all_replies[_reply_ids] = reply_struct(\\r\\n            _reply_ids,\\r\\n            _message_id,\\r\\n            _reply\\r\\n        );\\r\\n        _reply_ids++;\\r\\n\\r\\n        return _reply_ids;\\r\\n    }\\r\\n\\r\\n    function getReplyIDs(\\r\\n        uint256 message_id\\r\\n    ) public view returns (uint256[] memory ) {\\r\\n        //Getting all messages ids by idea id\\r\\n        uint256[] memory _All_Messages_Replys = new uint256[](_reply_ids);\\r\\n        uint256 _reply_id;\\r\\n        for (uint256 i = 0; i < _reply_ids; i++) {\\r\\n            if (all_replies[i].message_id == message_id) {\\r\\n                _All_Messages_Replys[_reply_id] = all_replies[i].reply_id;\\r\\n                _reply_id++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return _All_Messages_Replys;\\r\\n    }\\r\\n\\r\\n\\r\\n    // Doante with a validator Address\\r\\n    function donate(uint256 _idea_id,uint256 _amount) public payable  {\\r\\n        _approveRequiredMsgs();\\r\\n        donated[_idea_id] += _amount;\\r\\n    }\\r\\n\\r\\n    function stake(uint256 _amount) public {\\r\\n        STAKING_CONTRACT.delegate(address(this), _validatorAddr, _amount);\\r\\n\\r\\n    }\\r\\n\\r\\n    function redeemDonatedMoney(uint256 _idea_id) public returns (string memory) {      \\r\\n        _approveRequiredMsgs();\\r\\n        //Sotring Rewards to smart contract\\r\\n        Coin[] memory newRewards = DISTRIBUTION_CONTRACT.withdrawDelegatorRewards(address(this), _validatorAddr);\\r\\n        _total_delegations +=  newRewards[0].amount;\\r\\n\\r\\n        //Withdrawing donated amount with rewards\\r\\n        uint256 _amount = donated[_idea_id];\\r\\n        STAKING_CONTRACT.undelegate(address(this), _validatorAddr, _amount);\\r\\n        uint256 _donated_amount = _amount + newRewards[0].amount;\\r\\n        (bool sent,) = payable(msg.sender).call{value: _donated_amount}(\\\"\\\");     \\r\\n        donated[_idea_id] = 0;\\r\\n        return  \\\"Sent Money to idea owner\\\";\\r\\n    }\\r\\n    function withdrawAllMoney() public  {\\r\\n        uint256 _amount = address(this).balance;\\r\\n        (bool sent,) = payable(msg.sender).call{value: _amount}(\\\"\\\");     \\r\\n    }\\r\\n    function getContractBalance() public view returns (uint) {\\r\\n     return address(this).balance;\\r\\n    }\\r\\n    \\r\\n    function getContractRewards() public view returns (DecCoin[] memory) {\\r\\n        return DISTRIBUTION_CONTRACT.delegationRewards(address(this), _validatorAddr);\\r\\n    }\\r\\n\\r\\n    function getDelegation() public view returns (uint256) {\\r\\n        (uint256 denom , Coin memory coin ) =  STAKING_CONTRACT.delegation(address(this), _validatorAddr);\\r\\n        return coin.amount;\\r\\n    }\\r\\n\\r\\n    function getUnbondingDelegation() public view returns (UnbondingDelegationEntry[] memory) {\\r\\n        return STAKING_CONTRACT.unbondingDelegation(address(this), _validatorAddr);\\r\\n    }\\r\\n\\r\\n\\r\\n    function reset_all() public {\\r\\n        for (uint256 i = 0; i < _dao_ids; i++) delete _dao_uris[i];\\r\\n        for (uint256 i = 0; i < _goal_ids; i++) delete _goal_uris[i];\\r\\n        for (uint256 i = 0; i < _ideas_ids; i++) delete _ideas_uris[i];\\r\\n        for (uint256 i = 0; i < _goal_ids; i++) delete _smart_contracts_uris[i];\\r\\n        for (uint256 i = 0; i < _message_ids; i++) delete all_messages[i];\\r\\n        for (uint256 i = 0; i < _reply_ids; i++) delete all_replies[i];\\r\\n        for (uint256 i = 0; i < _ideas_vote_ids; i++)delete all_goal_ideas_votes[i];\\r\\n        _dao_ids = 0;\\r\\n        _goal_ids = 0;\\r\\n        _ideas_ids = 0;\\r\\n        _message_ids = 0;\\r\\n        _reply_ids = 0;        \\r\\n        _ideas_vote_ids = 0;\\r\\n    }\\r\\n    /// @dev approves the staking and distribution contracts for donating\\r\\n    function _approveRequiredMsgs() public {\\r\\n        bool successStk = STAKING_CONTRACT.approve(tx.origin,   type(uint256).max, stakingMethods);\\r\\n        require(successStk, \\\"Staking Approve failed\\\");\\r\\n        bool successDist = DISTRIBUTION_CONTRACT.approve(tx.origin, distributionMethods);\\r\\n        require(successDist, \\\"Distribution Approve failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd0126f5b6da3bcb5146d4648abe11948dd7dee744ef9926d7383fafce3597b9b\",\"license\":\"MIT\"},\"contracts/precompiles/common/Authorization.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-v3\\npragma solidity >=0.8.17;\\n\\n/// @author Evmos Team\\n/// @title Authorization Interface\\n/// @dev The interface through which solidity contracts will interact with smart contract approvals.\\ninterface AuthorizationI {\\n    /// @dev Approves a list of Cosmos or IBC transactions with a specific amount of tokens.\\n    /// @param spender The address which will spend the funds.\\n    /// @param amount The amount of tokens to be spent.\\n    /// @param methods The message type URLs of the methods to approve.\\n    /// @return approved Boolean value to indicate if the approval was successful.\\n    function approve(\\n        address spender,\\n        uint256 amount,\\n        string[] calldata methods\\n    ) external returns (bool approved);\\n\\n    /// @dev Increase the allowance of a given spender by a specific amount of tokens for IBC\\n    /// transfer methods or staking.\\n    /// @param spender The address which will spend the funds.\\n    /// @param amount The amount of tokens to be spent.\\n    /// @param methods The message type URLs of the methods to approve.\\n    /// @return approved Boolean value to indicate if the approval was successful.\\n    function increaseAllowance(\\n        address spender,\\n        uint256 amount,\\n        string[] calldata methods\\n    ) external returns (bool approved);\\n\\n    /// @dev Decreases the allowance of a given spender by a specific amount of tokens for IBC\\n    /// transfer methods or staking.\\n    /// @param spender The address which will spend the funds.\\n    /// @param amount The amount of tokens to be spent.\\n    /// @param methods The message type URLs of the methods to approve.\\n    /// @return approved Boolean value to indicate if the approval was successful.\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 amount,\\n        string[] calldata methods\\n    ) external returns (bool approved);\\n\\n\\n    /// @dev Returns the remaining number of tokens that spender will be allowed to spend\\n    /// on behalf of the owner through IBC transfer methods or staking. This is zero by default.\\n    /// @param owner The address of the account owning tokens.\\n    /// @param spender The address of the account able to transfer the tokens.\\n    /// @param method The message type URL of the methods for which the approval should be queried.\\n    /// @return remaining The remaining number of tokens available to be spent.\\n    function allowance(\\n        address owner,\\n        address spender,\\n        string calldata method\\n    ) external view returns (uint256 remaining);\\n\\n    /// @dev This event is emitted when the allowance of a spender is set by a call to the approve method.\\n    /// The value field specifies the new allowance and the methods field holds the information for which methods\\n    /// the approval was set.\\n    /// @param owner The owner of the tokens.\\n    /// @param spender The address which will spend the funds.\\n    /// @param methods The message type URLs of the methods for which the approval is set.\\n    /// @param value The amount of tokens approved to be spent.\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        string[] methods,\\n        uint256 value\\n    );\\n\\n    /// @dev This event is emitted when the allowance of a spender is changed by a call to the decrease or increase\\n    /// allowance method. The values field specifies the new allowances and the methods field holds the\\n    /// information for which methods the approval was set.\\n    /// @param owner The owner of the tokens.\\n    /// @param spender The address which will spend the funds.\\n    /// @param methods The message type URLs of the methods for which the approval is set.\\n    /// @param values The amounts of tokens approved to be spent.\\n    event AllowanceChange(\\n        address indexed owner,\\n        address indexed spender,\\n        string[] methods,\\n        uint256[] values\\n    );\\n}\\n\",\"keccak256\":\"0xf77a5f9eb42b7f546d2beeb49e1c120f0491620fbf1402a687ac34a275c6cb05\",\"license\":\"LGPL-v3\"},\"contracts/precompiles/common/GenericAuthorization.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-v3\\npragma solidity >=0.8.17;\\n\\n/// @author Evmos Team\\n/// @title Authorization Interface\\n/// @dev The interface through which solidity contracts will interact with smart contract approvals.\\ninterface GenericAuthorizationI {\\n    /// @dev Approves a list of Cosmos or IBC transactions with a specific amount of tokens.\\n    /// @param spender The address which will spend the funds.\\n    /// @param methods The message type URLs of the methods to approve.\\n    /// @return approved Boolean value to indicate if the approval was successful.\\n    function approve(\\n        address spender,\\n        string[] calldata methods\\n    ) external returns (bool approved);\\n\\n    /// @dev Revokes a list of Cosmos transactions.\\n    /// @param spender The address which will spend the funds.\\n    /// @param methods The message type URLs of the methods to revoke.\\n    /// @return revoked Boolean value to indicate if the revocation was successful.\\n    function revoke(\\n        address spender,\\n        string[] calldata methods\\n    ) external returns (bool revoked);\\n\\n    /// @dev This event is emitted when the allowance of a spender is set by a call to the approve method.\\n    /// The value field specifies the new allowance and the methods field holds the information for which methods\\n    /// the approval was set.\\n    /// @param owner The owner of the tokens.\\n    /// @param spender The address which will spend the funds.\\n    /// @param methods The message type URLs of the methods for which the approval is set.\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        string[] methods\\n    );\\n\\n    /// @dev This event is emitted when an owner revokes a spender's allowance.\\n    /// @param owner The owner of the tokens.\\n    /// @param spender The address which will spend the funds.\\n    /// @param methods The message type URLs of the methods for which the approval is set.\\n    event Revocation(\\n        address indexed owner,\\n        address indexed spender,\\n        string[] methods\\n    );\\n}\\n\",\"keccak256\":\"0x5560defd75b84c2d333dc68120a9d425423ff7cd0c443fcd50209f9d0e0dff88\",\"license\":\"LGPL-v3\"},\"contracts/precompiles/common/Types.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-v3\\npragma solidity >=0.8.17;\\n\\nstruct Dec {\\n    uint256 value;\\n    uint8 precision;\\n}\\n\\n/// @dev Coin is a struct that represents a token with a denomination and an amount.\\nstruct Coin {\\n    string denom;\\n    uint256 amount;\\n}\\n\\n/// @dev DecCoin is a struct that represents a token with a denomination, an amount and a precision.\\nstruct DecCoin {\\n    string denom;\\n    uint256 amount;\\n    uint8 precision;\\n}\\n\\n/// @dev PageResponse is a struct that represents a page response.\\nstruct PageResponse {\\n    bytes nextKey;\\n    uint64 total;\\n}\\n\",\"keccak256\":\"0x2280bf7e63e011c5263d33ae3cf64673e27ee08226116a5ae289a05c026e5cc8\",\"license\":\"LGPL-v3\"},\"contracts/precompiles/stateful/Distribution.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-v3\\npragma solidity >=0.8.17;\\n\\nimport \\\"../common/GenericAuthorization.sol\\\" as genericAuth;\\nimport \\\"../common/Types.sol\\\";\\n\\n/// @dev The DistributionI contract's address.\\naddress constant DISTRIBUTION_PRECOMPILE_ADDRESS = 0x0000000000000000000000000000000000000801;\\n\\n/// @dev Define all the available distribution methods.\\nstring constant MSG_SET_WITHDRAWER_ADDRESS = \\\"/cosmos.distribution.v1beta1.MsgSetWithdrawAddress\\\";\\nstring constant MSG_WITHDRAW_DELEGATOR_REWARD = \\\"/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward\\\";\\nstring constant MSG_WITHDRAW_VALIDATOR_COMMISSION = \\\"/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission\\\";\\n\\n/// @dev The DistributionI contract's instance.\\nDistributionI constant DISTRIBUTION_CONTRACT = DistributionI(DISTRIBUTION_PRECOMPILE_ADDRESS);\\n\\nstruct ValidatorSlashEvent {\\n    uint64 validatorPeriod;\\n    Dec fraction;\\n}\\n\\nstruct ValidatorDistributionInfo {\\n    string operatorAddress;\\n    DecCoin[] selfBondRewards;\\n    DecCoin[] commission;\\n}\\n\\nstruct DelegationDelegatorReward {\\n    string validatorAddress;\\n    DecCoin[] reward;\\n}\\n\\n/// @author Evmos Team\\n/// @title Distribution Precompile Contract\\n/// @dev The interface through which solidity contracts will interact with Distribution\\n/// @custom:address 0x0000000000000000000000000000000000000801\\ninterface DistributionI is genericAuth.GenericAuthorizationI {\\n    /// TRANSACTIONS\\n    /// @dev Change the address, that can withdraw the rewards of a delegator.\\n    /// Note that this address cannot be a module account.\\n    /// @param delegatorAddress The address of the delegator\\n    /// @param withdrawerAddress The address that will be capable of withdrawing rewards for\\n    /// the given delegator address\\n    function setWithdrawAddress(\\n        address delegatorAddress,\\n        string memory withdrawerAddress\\n    ) external returns (bool success);\\n\\n    /// @dev Withdraw the rewards of a delegator from a validator\\n    /// @param delegatorAddress The address of the delegator\\n    /// @param validatorAddress The address of the validator\\n    /// @return amount The amount of Coin withdrawn\\n    function withdrawDelegatorRewards(\\n        address delegatorAddress,\\n        string memory validatorAddress\\n    )\\n    external\\n    returns (\\n        Coin[] calldata amount\\n    );\\n\\n    /// @dev Withdraws the rewards commission of a validator.\\n    /// @param validatorAddress The address of the validator\\n    /// @return amount The amount of Coin withdrawn\\n    function withdrawValidatorCommission(\\n        string memory validatorAddress\\n    )\\n    external\\n    returns (\\n        Coin[] calldata amount\\n    );\\n\\n    /// QUERIES\\n    /// @dev Queries validator commission and self-delegation rewards for validator.\\n    /// @param validatorAddress The address of the validator\\n    /// @return distributionInfo The validator's distribution info\\n    function validatorDistributionInfo(\\n        string memory validatorAddress\\n    )\\n    external\\n    view\\n    returns (\\n        ValidatorDistributionInfo[] calldata distributionInfo // FIXME: remove unnecessary slice\\n    );\\n\\n    /// @dev Queries the outstanding rewards of a validator address.\\n    /// @param validatorAddress The address of the validator\\n    /// @return rewards The validator's outstanding rewards\\n    function validatorOutstandingRewards(\\n        string memory validatorAddress\\n    )\\n    external\\n    view\\n    returns (\\n        DecCoin[] calldata rewards\\n    );\\n\\n    /// @dev Queries the accumulated commission for a validator.\\n    /// @param validatorAddress The address of the validator\\n    /// @return commission The validator's commission\\n    function validatorCommission(\\n        string memory validatorAddress\\n    )\\n    external\\n    view\\n    returns (\\n        DecCoin[] calldata commission\\n    );\\n\\n    /// @dev Queries the slashing events for a validator in a given height interval\\n    /// defined by the starting and ending height.\\n    /// @param validatorAddress The address of the validator\\n    /// @param startingHeight The starting height\\n    /// @param endingHeight The ending height\\n    /// @return slashes The validator's slash events\\n    /// @return pageResponse The pagination response for the query\\n    function validatorSlashes(\\n        string memory validatorAddress,\\n        uint64 startingHeight,\\n        uint64 endingHeight\\n    )\\n    external\\n    view\\n    returns (\\n        ValidatorSlashEvent[] calldata slashes,\\n        PageResponse calldata pageResponse\\n    );\\n\\n    /// @dev Queries the total rewards accrued by a delegation from a specific address to a given validator.\\n    /// @param delegatorAddress The address of the delegator\\n    /// @param validatorAddress The address of the validator\\n    /// @return rewards The total rewards accrued by a delegation.\\n    function delegationRewards(\\n        address delegatorAddress,\\n        string memory validatorAddress\\n    )\\n    external\\n    view\\n    returns (\\n        DecCoin[] calldata rewards\\n    );\\n\\n    /// @dev Queries the total rewards accrued by each validator, that a given\\n    /// address has delegated to.\\n    /// @param delegatorAddress The address of the delegator\\n    /// @return rewards The total rewards accrued by each validator for a delegator.\\n    /// @return total The total rewards accrued by a delegator.\\n    function delegationTotalRewards(\\n        address delegatorAddress\\n    )\\n    external\\n    view\\n    returns (\\n        DelegationDelegatorReward[] calldata rewards,\\n        DecCoin[] calldata total\\n    );\\n\\n    /// @dev Queries all validators, that a given address has delegated to.\\n    /// @param delegatorAddress The address of the delegator\\n    /// @return validators The addresses of all validators, that were delegated to by the given address.\\n    function delegatorValidators(\\n        address delegatorAddress\\n    ) external view returns (string[] calldata validators);\\n\\n    /// @dev Queries the address capable of withdrawing rewards for a given delegator.\\n    /// @param delegatorAddress The address of the delegator\\n    /// @return withdrawAddress The address capable of withdrawing rewards for the delegator.\\n    function delegatorWithdrawAddress(\\n        address delegatorAddress\\n    ) external view returns (string memory withdrawAddress);\\n\\n    /// @dev SetWithdrawerAddress defines an Event emitted when a new withdrawer address is being set\\n    /// @param caller the caller of the transaction\\n    /// @param withdrawerAddress the newly set withdrawer address\\n    event SetWithdrawerAddress(\\n        address indexed caller,\\n        string withdrawerAddress\\n    );\\n\\n    /// @dev WithdrawDelegatorRewards defines an Event emitted when rewards from a delegation are withdrawn\\n    /// @param delegatorAddress the address of the delegator\\n    /// @param validatorAddress the address of the validator\\n    /// @param amount the amount being withdrawn from the delegation\\n    event WithdrawDelegatorRewards(\\n        address indexed delegatorAddress,\\n        string indexed validatorAddress,\\n        uint256 amount\\n    );\\n\\n    /// @dev WithdrawValidatorCommission defines an Event emitted when validator commissions are being withdrawn\\n    /// @param validatorAddress is the address of the validator\\n    /// @param commission is the total commission earned by the validator\\n    event WithdrawValidatorCommission(\\n        string indexed validatorAddress,\\n        uint256 commission\\n    );\\n}\\n\",\"keccak256\":\"0x6815efb027a2ce3fc4d43073ac9e1dc117b156a74951c17b19f3f531483dc9e1\",\"license\":\"LGPL-v3\"},\"contracts/precompiles/stateful/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-v3\\npragma solidity >=0.8.17;\\n\\nimport \\\"../common/Authorization.sol\\\" as authorization;\\nimport \\\"../common/Types.sol\\\";\\n\\n/// @dev The StakingI contract's address.\\naddress constant STAKING_PRECOMPILE_ADDRESS = 0x0000000000000000000000000000000000000800;\\n\\n/// @dev The StakingI contract's instance.\\nStakingI constant STAKING_CONTRACT = StakingI(STAKING_PRECOMPILE_ADDRESS);\\n\\n/// @dev Define all the available staking methods.\\nstring constant MSG_DELEGATE = \\\"/cosmos.staking.v1beta1.MsgDelegate\\\";\\nstring constant MSG_UNDELEGATE = \\\"/cosmos.staking.v1beta1.MsgUndelegate\\\";\\nstring constant MSG_REDELEGATE = \\\"/cosmos.staking.v1beta1.MsgBeginRedelegate\\\";\\nstring constant MSG_CANCEL_UNDELEGATION = \\\"/cosmos.staking.v1beta1.MsgCancelUnbondingDelegation\\\";\\n\\n/// @dev Defines the initial commission rates to be used for creating\\n/// a validator.\\nstruct CommissionRates {\\n    uint256 rate;\\n    uint256 maxRate;\\n    uint256 maxChangeRate;\\n}\\n\\n/// @dev Defines commission parameters for a given validator.\\nstruct Commission {\\n    CommissionRates commissionRates;\\n    uint256 updateTime;\\n}\\n\\n\\n/// @dev Represents a validator in the staking module.\\nstruct Validator {\\n    string operatorAddress;\\n    string consensusPubkey;\\n    bool jailed;\\n    BondStatus status;\\n    uint256 tokens;\\n    uint256 delegatorShares;\\n    string description;\\n    int64 unbondingHeight;\\n    int64 unbondingTime;\\n    uint256 commission;\\n    uint256 minSelfDelegation;\\n}\\n\\nstruct RedelegationResponse {\\n    Redelegation redelegation;\\n    RedelegationEntryResponse[] entries;\\n}\\n\\nstruct Redelegation {\\n    RedelegationEntry[] entries;\\n}\\n\\nstruct RedelegationEntryResponse {\\n    RedelegationEntry redelegationEntry;\\n    uint256 balance;\\n}\\n\\nstruct RedelegationEntry {\\n    int64 creationHeight;\\n    int64 completionTime;\\n    uint256 initialBalance;\\n    uint256 sharesDst;\\n}\\n\\nstruct UnbondingDelegationEntry {\\n    int64 creationHeight;\\n    int64 completionTime;\\n    uint256 initialBalance;\\n    uint256 balance;\\n}\\n\\nstruct PageRequest {\\n    bytes key;\\n    uint64 offset;\\n    uint64 limit;\\n    bool countTotal;\\n    bool reverse;\\n}\\n\\n/// @dev The status of the validator.\\nenum BondStatus {\\n    Unspecified,\\n    Unbonded,\\n    Unbonding,\\n    Bonded\\n}\\n\\n/// @author Evmos Team\\n/// @title Staking Precompiled Contract\\n/// @dev The interface through which solidity contracts will interact with staking.\\n/// We follow this same interface including four-byte function selectors, in the precompile that\\n/// wraps the pallet.\\n/// @custom:address 0x0000000000000000000000000000000000000800\\ninterface StakingI is authorization.AuthorizationI {\\n    /// @dev Defines a method for performing a delegation of coins from a delegator to a validator.\\n    /// @param delegatorAddress The address of the delegator\\n    /// @param validatorAddress The address of the validator\\n    /// @param amount The amount of the Coin to be delegated to the validator\\n    function delegate(\\n        address delegatorAddress,\\n        string memory validatorAddress,\\n        uint256 amount\\n    ) external returns (int64 completionTime);\\n\\n    /// @dev Defines a method for performing an undelegation from a delegate and a validator.\\n    /// @param delegatorAddress The address of the delegator\\n    /// @param validatorAddress The address of the validator\\n    /// @param amount The amount to be undelegated from the validator\\n    /// @return completionTime The time when the undelegation is completed\\n    function undelegate(\\n        address delegatorAddress,\\n        string memory validatorAddress,\\n        uint256 amount\\n    ) external returns (int64 completionTime);\\n\\n    /// @dev Defines a method for performing a redelegation\\n    /// of coins from a delegator and source validator to a destination validator.\\n    /// @param delegatorAddress The address of the delegator\\n    /// @param validatorSrcAddress The validator from which the redelegation is initiated\\n    /// @param validatorDstAddress The validator to which the redelegation is destined\\n    /// @param amount The amount to be redelegated to the validator\\n    /// @return completionTime The time when the redelegation is completed\\n    function redelegate(\\n        address delegatorAddress,\\n        string memory validatorSrcAddress,\\n        string memory validatorDstAddress,\\n        uint256 amount\\n    ) external returns (int64 completionTime);\\n\\n    /// @dev Allows delegators to cancel the unbondingDelegation entry\\n    /// and to delegate back to a previous validator.\\n    /// @param delegatorAddress The address of the delegator\\n    /// @param validatorAddress The address of the validator\\n    /// @param amount The amount of the Coin\\n    /// @param creationHeight The height at which the unbonding took place\\n    /// @return completionTime The time when the cancellation of the unbonding delegation is completed\\n    function cancelUnbondingDelegation(\\n        address delegatorAddress,\\n        string memory validatorAddress,\\n        uint256 amount,\\n        uint256 creationHeight\\n    ) external returns (int64 completionTime);\\n\\n    /// @dev Queries the given amount of the bond denomination to a validator.\\n    /// @param delegatorAddress The address of the delegator.\\n    /// @param validatorAddress The address of the validator.\\n    /// @return shares The amount of shares, that the delegator has received.\\n    /// @return balance The amount in Coin, that the delegator has delegated to the given validator.\\n    function delegation(\\n        address delegatorAddress,\\n        string memory validatorAddress\\n    ) external view returns (uint256 shares, Coin calldata balance);\\n\\n    /// @dev Returns the delegation shares and coins, that are currently\\n    /// unbonding for a given delegator and validator pair.\\n    /// @param delegatorAddress The address of the delegator.\\n    /// @param validatorAddress The address of the validator.\\n    /// @return entries The delegations that are currently unbonding.\\n    function unbondingDelegation(\\n        address delegatorAddress,\\n        string memory validatorAddress\\n    ) external view returns (UnbondingDelegationEntry[] calldata entries);\\n\\n    /// @dev Queries validator info for a given validator address.\\n    /// @param validatorAddress The address of the validator.\\n    /// @return validators The validator info for the given validator address.\\n    function validator(\\n        string memory validatorAddress\\n    )\\n    external view returns (\\n        Validator[] calldata validators\\n    );\\n\\n    /// @dev Queries all validators that match the given status.\\n    /// @param status Enables to query for validators matching a given status.\\n    /// @param pageRequest Defines an optional pagination for the request.\\n    function validators(\\n        string memory status,\\n        PageRequest calldata pageRequest\\n    ) external view returns (\\n        Validator[] calldata validators,\\n        PageResponse calldata pageResponse\\n    );\\n\\n    /// @dev Queries all redelegations from a source to a destination validator for a given delegator.\\n    /// @param delegatorAddress The address of the delegator.\\n    /// @param srcValidatorAddress Defines the validator address to redelegate from.\\n    /// @param dstValidatorAddress Defines the validator address to redelegate to.\\n    /// @return entries The active redelegations for the given delegator, source and destination validator combination.\\n    function redelegation(\\n        address delegatorAddress,\\n        string memory srcValidatorAddress,\\n        string memory dstValidatorAddress\\n    ) external view returns (RedelegationEntry[] calldata entries);\\n\\n    /// @dev Queries all redelegations from a source to to a destination validator\\n    /// for a given delegator in a specified pagination manner.\\n    /// @param delegatorAddress The address of the delegator.\\n    /// @param srcValidatorAddress Defines the validator address to redelegate from.\\n    /// @param dstValidatorAddress Defines the validator address to redelegate to.\\n    /// @param pageRequest Defines an optional pagination for the request.\\n    /// @return response Holds the redelegations for the given delegator, source and destination validator combination.\\n    function redelegations(\\n        address delegatorAddress,\\n        string memory srcValidatorAddress,\\n        string memory dstValidatorAddress,\\n        PageRequest calldata pageRequest\\n    ) external view returns (RedelegationResponse calldata response);\\n\\n    /// @dev Delegate defines an Event emitted when a given amount of tokens are delegated from the\\n    /// delegator address to the validator address.\\n    /// @param delegatorAddress The address of the delegator\\n    /// @param validatorAddress The address of the validator\\n    /// @param amount The amount of Coin being delegated\\n    /// @param newShares The new delegation shares being held\\n    event Delegate(\\n        address indexed delegatorAddress,\\n        string indexed validatorAddress,\\n        uint256 amount,\\n        uint256 newShares\\n    );\\n\\n    /// @dev Unbond defines an Event emitted when a given amount of tokens are unbonded from the\\n    /// validator address to the delegator address.\\n    /// @param delegatorAddress The address of the delegator\\n    /// @param validatorAddress The address of the validator\\n    /// @param amount The amount of Coin being unbonded\\n    /// @param completionTime The time at which the unbonding is completed\\n    event Unbond(\\n        address indexed delegatorAddress,\\n        string indexed validatorAddress,\\n        uint256 amount,\\n        uint256 completionTime\\n    );\\n\\n    /// @dev Redelegate defines an Event emitted when a given amount of tokens are redelegated from\\n    /// the source validator address to the destination validator address.\\n    /// @param delegatorAddress The address of the delegator\\n    /// @param validatorSrcAddress The address of the validator from which the delegation is retracted\\n    /// @param validatorDstAddress The address of the validator to which the delegation is directed\\n    /// @param amount The amount of Coin being redelegated\\n    /// @param completionTime The time at which the redelegation is completed\\n    event Redelegate(\\n        address indexed delegatorAddress,\\n        string indexed validatorSrcAddress,\\n        string indexed validatorDstAddress,\\n        uint256 amount,\\n        uint256 completionTime\\n    );\\n\\n    /// @dev CancelUnbondingDelegation defines an Event emitted when a given amount of tokens\\n    /// that are in the process of unbonding from the validator address are bonded again.\\n    /// @param delegatorAddress The address of the delegator\\n    /// @param validatorAddress The address of the validator\\n    /// @param amount The amount of Coin that was in the unbonding process which is to be cancelled\\n    /// @param creationHeight The block height at which the unbonding of a delegation was initiated\\n    event CancelUnbondingDelegation(\\n        address indexed delegatorAddress,\\n        string indexed validatorAddress,\\n        uint256 amount,\\n        uint256 creationHeight\\n    );\\n}\\n\",\"keccak256\":\"0x774d4bf7a848893697fa75fa11a2ec288e6df6f010f9bdd8b3c6010ef007ac67\",\"license\":\"LGPL-v3\"}},\"version\":1}",
  "bytecode": "0x60806040526040518060600160405280604051806060016040528060238152602001620050996023913981526020016040518060600160405280602581526020016200503d6025913981526020016040518060600160405280602a815260200162004fe0602a913981525060009060036200007c929190620000f7565b50604051806020016040528060405180606001604052806037815260200162005062603791398152506001906001620000b792919062000157565b506040518060600160405280603381526020016200500a6033913960049081620000e29190620004be565b50348015620000f057600080fd5b50620005a5565b82805482825590600052602060002090810192821562000144579160200282015b8281111562000143578251829081620001329190620004be565b509160200191906001019062000118565b5b509050620001539190620001b7565b5090565b828054828255906000526020600020908101928215620001a4579160200282015b82811115620001a3578251829081620001929190620004be565b509160200191906001019062000178565b5b509050620001b39190620001b7565b5090565b5b80821115620001db5760008181620001d19190620001df565b50600101620001b8565b5090565b508054620001ed90620002ad565b6000825580601f1062000201575062000222565b601f01602090049060005260206000209081019062000221919062000225565b5b50565b5b808211156200024057600081600090555060010162000226565b5090565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620002c657607f821691505b602082108103620002dc57620002db6200027e565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003467fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000307565b62000352868362000307565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200039f6200039962000393846200036a565b62000374565b6200036a565b9050919050565b6000819050919050565b620003bb836200037e565b620003d3620003ca82620003a6565b84845462000314565b825550505050565b600090565b620003ea620003db565b620003f7818484620003b0565b505050565b5b818110156200041f5762000413600082620003e0565b600181019050620003fd565b5050565b601f8211156200046e576200043881620002e2565b6200044384620002f7565b8101602085101562000453578190505b6200046b6200046285620002f7565b830182620003fc565b50505b505050565b600082821c905092915050565b6000620004936000198460080262000473565b1980831691505092915050565b6000620004ae838362000480565b9150826002028217905092915050565b620004c98262000244565b67ffffffffffffffff811115620004e557620004e46200024f565b5b620004f18254620002ad565b620004fe82828562000423565b600060209050601f83116001811462000536576000841562000521578287015190505b6200052d8582620004a0565b8655506200059d565b601f1984166200054686620002e2565b60005b82811015620005705784890151825560018201915060208501945060208101905062000549565b868310156200059057848901516200058c601f89168262000480565b8355505b6001600288020188555050505b505050505050565b614a2b80620005b56000396000f3fe6080604052600436106102ae5760003560e01c80637f2035d411610175578063aa4cdf2a116100dc578063c04fe97811610095578063d3791b201161006f578063d3791b2014610b96578063e3280c9614610bc1578063e32acc1a14610bfe578063ff4a37ef14610c3b576102ae565b8063c04fe97814610b05578063c29595c514610b30578063c4c2e36414610b59576102ae565b8063aa4cdf2a14610a07578063ae429e4714610a44578063b16060a614610a6f578063b2947c7114610a86578063b527d45e14610a9d578063c04e743014610adc576102ae565b80639077007d1161012e5780639077007d146108f757806397ee760614610922578063a1ca91781461094d578063a2cdb3a91461098a578063a694fc3a146109b3578063aa2bf5d3146109dc576102ae565b80637f2035d41461079c578063803f5b9f146107da578063812fae1f1461081757806382fcc73214610854578063881de858146108915780638d3d2595146108ba576102ae565b8063414d9a2b116102195780635d907da1116101d25780635d907da1146106525780636af3304e1461068f5780636f9fb98a146106cc57806371085cab146106f75780637bbd582d146107345780637e22cd111461075f576102ae565b8063414d9a2b1461051857806342c7652a14610555578063468d0c80146105805780634a797bd7146105bf5780634be7adb5146105ea57806353f6880214610627576102ae565b80631ba44c4c1161026b5780631ba44c4c146103b65780631e9ac9f5146103f557806327a568b91461043257806329b56f60146104715780632d5bf5b01461049c5780633f87a2f4146104d9576102ae565b80630cdd53f6146102b3578063109ac970146102cf578063131d44f21461030c57806313bf4cea146103495780631b52b9de146103745780631b592aeb1461038b575b600080fd5b6102cd60048036038101906102c89190612f03565b610c7a565b005b3480156102db57600080fd5b506102f660048036038101906102f19190612f43565b610cb0565b60405161030391906130c2565b60405180910390f35b34801561031857600080fd5b50610333600480360381019061032e9190612f43565b610e1f565b60405161034091906130c2565b60405180910390f35b34801561035557600080fd5b5061035e610f8e565b60405161036b91906130f3565b60405180910390f35b34801561038057600080fd5b50610389610f94565b005b34801561039757600080fd5b506103a0611009565b6040516103ad91906130f3565b60405180910390f35b3480156103c257600080fd5b506103dd60048036038101906103d89190612f43565b61100f565b6040516103ec93929190613158565b60405180910390f35b34801561040157600080fd5b5061041c600480360381019061041791906132cb565b6110c1565b60405161042991906130f3565b60405180910390f35b34801561043e57600080fd5b5061045960048036038101906104549190612f43565b611132565b60405161046893929190613314565b60405180910390f35b34801561047d57600080fd5b506104866112f4565b60405161049391906130c2565b60405180910390f35b3480156104a857600080fd5b506104c360048036038101906104be9190613360565b61142f565b6040516104d091906130f3565b60405180910390f35b3480156104e557600080fd5b5061050060048036038101906104fb9190612f43565b6114b3565b60405161050f93929190613158565b60405180910390f35b34801561052457600080fd5b5061053f600480360381019061053a9190612f43565b611565565b60405161054c91906130f3565b60405180910390f35b34801561056157600080fd5b5061056a61157d565b60405161057791906134eb565b60405180910390f35b34801561058c57600080fd5b506105a760048036038101906105a29190612f43565b611608565b6040516105b69392919061350d565b60405180910390f35b3480156105cb57600080fd5b506105d46116ba565b6040516105e191906130f3565b60405180910390f35b3480156105f657600080fd5b50610611600480360381019061060c9190612f03565b6116c0565b60405161061e91906130c2565b60405180910390f35b34801561063357600080fd5b5061063c611852565b60405161064991906130f3565b60405180910390f35b34801561065e57600080fd5b5061067960048036038101906106749190612f43565b6118eb565b604051610686919061354b565b60405180910390f35b34801561069b57600080fd5b506106b660048036038101906106b19190613360565b611993565b6040516106c391906130f3565b60405180910390f35b3480156106d857600080fd5b506106e1611a17565b6040516106ee91906130f3565b60405180910390f35b34801561070357600080fd5b5061071e6004803603810190610719919061356d565b611a1f565b60405161072b91906130f3565b60405180910390f35b34801561074057600080fd5b50610749611a91565b60405161075691906130f3565b60405180910390f35b34801561076b57600080fd5b5061078660048036038101906107819190612f43565b611a97565b604051610793919061354b565b60405180910390f35b3480156107a857600080fd5b506107c360048036038101906107be9190612f43565b611cf4565b6040516107d19291906135c9565b60405180910390f35b3480156107e657600080fd5b5061080160048036038101906107fc9190612f43565b611da0565b60405161080e91906136a8565b60405180910390f35b34801561082357600080fd5b5061083e60048036038101906108399190612f43565b611e83565b60405161084b91906136a8565b60405180910390f35b34801561086057600080fd5b5061087b600480360381019061087691906136ca565b611f66565b60405161088891906130f3565b60405180910390f35b34801561089d57600080fd5b506108b860048036038101906108b39190613739565b611fe9565b005b3480156108c657600080fd5b506108e160048036038101906108dc9190612f43565b612036565b6040516108ee919061354b565b60405180910390f35b34801561090357600080fd5b5061090c6120de565b60405161091991906130f3565b60405180910390f35b34801561092e57600080fd5b506109376120e4565b60405161094491906130c2565b60405180910390f35b34801561095957600080fd5b50610974600480360381019061096f91906132cb565b61221f565b60405161098191906130f3565b60405180910390f35b34801561099657600080fd5b506109b160048036038101906109ac9190612f03565b612290565b005b3480156109bf57600080fd5b506109da60048036038101906109d59190612f43565b6122c1565b005b3480156109e857600080fd5b506109f1612348565b6040516109fe91906130f3565b60405180910390f35b348015610a1357600080fd5b50610a2e6004803603810190610a2991906132cb565b61234e565b604051610a3b91906130f3565b60405180910390f35b348015610a5057600080fd5b50610a596123d5565b604051610a6691906138f2565b60405180910390f35b348015610a7b57600080fd5b50610a84612460565b005b348015610a9257600080fd5b50610a9b6126fb565b005b348015610aa957600080fd5b50610ac46004803603810190610abf9190612f43565b6128ab565b604051610ad393929190613158565b60405180910390f35b348015610ae857600080fd5b50610b036004803603810190610afe9190613360565b61295d565b005b348015610b1157600080fd5b50610b1a612985565b604051610b2791906130c2565b60405180910390f35b348015610b3c57600080fd5b50610b576004803603810190610b529190613360565b612ac0565b005b348015610b6557600080fd5b50610b806004803603810190610b7b9190613914565b612ae8565b604051610b8d91906130f3565b60405180910390f35b348015610ba257600080fd5b50610bab612bb7565b604051610bb891906130f3565b60405180910390f35b348015610bcd57600080fd5b50610be86004803603810190610be39190613a72565b612bbd565b604051610bf591906130f3565b60405180910390f35b348015610c0a57600080fd5b50610c256004803603810190610c209190612f43565b612ca2565b604051610c32919061354b565b60405180910390f35b348015610c4757600080fd5b50610c626004803603810190610c5d9190612f43565b612d4a565b604051610c7193929190613158565b60405180910390f35b610c826126fb565b80600260008481526020019081526020016000206000828254610ca59190613b2c565b925050819055505050565b6060600060065467ffffffffffffffff811115610cd057610ccf6131a0565b5b604051908082528060200260200182016040528015610d0357816020015b6060815260200190600190039081610cee5790505b509050600080600090505b600654811015610e145784600d60008381526020019081526020016000206000015403610e0157600d60008281526020019081526020016000206001018054610d5690613b8f565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8290613b8f565b8015610dcf5780601f10610da457610100808354040283529160200191610dcf565b820191906000526020600020905b815481529060010190602001808311610db257829003601f168201915b5050505050838381518110610de757610de6613bc0565b5b60200260200101819052508180610dfd90613bef565b9250505b8080610e0c90613bef565b915050610d0e565b508192505050919050565b6060600060075467ffffffffffffffff811115610e3f57610e3e6131a0565b5b604051908082528060200260200182016040528015610e7257816020015b6060815260200190600190039081610e5d5790505b509050600080600090505b600754811015610f835784600e60008381526020019081526020016000206000015403610f6257600e60008281526020019081526020016000206001018054610ec590613b8f565b80601f0160208091040260200160405190810160405280929190818152602001828054610ef190613b8f565b8015610f3e5780601f10610f1357610100808354040283529160200191610f3e565b820191906000526020600020905b815481529060010190602001808311610f2157829003601f168201915b5050505050838381518110610f5657610f55613bc0565b5b60200260200101819052505b8180610f6d90613bef565b9250508080610f7b90613bef565b915050610e7d565b508192505050919050565b60065481565b600047905060003373ffffffffffffffffffffffffffffffffffffffff1682604051610fbf90613c68565b60006040518083038185875af1925050503d8060008114610ffc576040519150601f19603f3d011682016040523d82523d6000602084013e611001565b606091505b505090505050565b60085481565b601060205280600052604060002060009150905080600001549080600101549080600201805461103e90613b8f565b80601f016020809104026020016040519081016040528092919081815260200182805461106a90613b8f565b80156110b75780601f1061108c576101008083540402835291602001916110b7565b820191906000526020600020905b81548152906001019060200180831161109a57829003601f168201915b5050505050905083565b600080600090505b600654811015611127578280519060200120600d60008381526020019081526020016000206001016040516110fe9190613d15565b604051809103902003611114578091505061112d565b808061111f90613bef565b9150506110c9565b50600090505b919050565b600c60205280600052604060002060009150905080600001805461115590613b8f565b80601f016020809104026020016040519081016040528092919081815260200182805461118190613b8f565b80156111ce5780601f106111a3576101008083540402835291602001916111ce565b820191906000526020600020905b8154815290600101906020018083116111b157829003601f168201915b5050505050908060010180546111e390613b8f565b80601f016020809104026020016040519081016040528092919081815260200182805461120f90613b8f565b801561125c5780601f106112315761010080835404028352916020019161125c565b820191906000526020600020905b81548152906001019060200180831161123f57829003601f168201915b50505050509080600201805461127190613b8f565b80601f016020809104026020016040519081016040528092919081815260200182805461129d90613b8f565b80156112ea5780601f106112bf576101008083540402835291602001916112ea565b820191906000526020600020905b8154815290600101906020018083116112cd57829003601f168201915b5050505050905083565b6060600060065467ffffffffffffffff811115611314576113136131a0565b5b60405190808252806020026020018201604052801561134757816020015b60608152602001906001900390816113325790505b50905060005b60065481101561142757600d6000828152602001908152602001600020600101805461137890613b8f565b80601f01602080910402602001604051908101604052809291908181526020018280546113a490613b8f565b80156113f15780601f106113c6576101008083540402835291602001916113f1565b820191906000526020600020905b8154815290600101906020018083116113d457829003601f168201915b505050505082828151811061140957611408613bc0565b5b6020026020010181905250808061141f90613bef565b91505061134d565b508091505090565b60006040518060600160405280600a5481526020018481526020018381525060116000600a5481526020019081526020016000206000820151816000015560208201518160010155604082015181600201908161148c9190613ed8565b50905050600a60008154809291906114a390613bef565b9190505550600a54905092915050565b60126020528060005260406000206000915090508060000154908060010154908060020180546114e290613b8f565b80601f016020809104026020016040519081016040528092919081815260200182805461150e90613b8f565b801561155b5780601f106115305761010080835404028352916020019161155b565b820191906000526020600020905b81548152906001019060200180831161153e57829003601f168201915b5050505050905083565b60026020528060005260406000206000915090505481565b606061080073ffffffffffffffffffffffffffffffffffffffff1663a03ffee13060046040518363ffffffff1660e01b81526004016115bd92919061406f565b600060405180830381865afa1580156115da573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906116039190614225565b905090565b600e60205280600052604060002060009150905080600001549080600101805461163190613b8f565b80601f016020809104026020016040519081016040528092919081815260200182805461165d90613b8f565b80156116aa5780601f1061167f576101008083540402835291602001916116aa565b820191906000526020600020905b81548152906001019060200180831161168d57829003601f168201915b5050505050908060020154905083565b60095481565b6060600060095467ffffffffffffffff8111156116e0576116df6131a0565b5b60405190808252806020026020018201604052801561171357816020015b60608152602001906001900390816116fe5790505b509050600080600090505b600954811015611846578560106000838152602001908152602001600020600001541480156117625750846010600083815260200190815260200160002060010154145b156118255760106000828152602001908152602001600020600201805461178890613b8f565b80601f01602080910402602001604051908101604052809291908181526020018280546117b490613b8f565b80156118015780601f106117d657610100808354040283529160200191611801565b820191906000526020600020905b8154815290600101906020018083116117e457829003601f168201915b505050505083838151811061181957611818613bc0565b5b60200260200101819052505b818061183090613bef565b925050808061183e90613bef565b91505061171e565b50819250505092915050565b600080600061080073ffffffffffffffffffffffffffffffffffffffff1663241774e63060046040518363ffffffff1660e01b815260040161189592919061406f565b600060405180830381865afa1580156118b2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906118db919061434a565b9150915080602001519250505090565b6060600c6000838152602001908152602001600020600101805461190e90613b8f565b80601f016020809104026020016040519081016040528092919081815260200182805461193a90613b8f565b80156119875780601f1061195c57610100808354040283529160200191611987565b820191906000526020600020905b81548152906001019060200180831161196a57829003601f168201915b50505050509050919050565b60006040518060600160405280600b5481526020018481526020018381525060126000600b548152602001908152602001600020600082015181600001556020820151816001015560408201518160020190816119f09190613ed8565b50905050600b6000815480929190611a0790613bef565b9190505550600b54905092915050565b600047905090565b6000604051806040016040528083815260200184815250600d60006006548152602001908152602001600020600082015181600001556020820151816001019081611a6a9190613ed8565b5090505060066000815480929190611a8190613bef565b9190505550600654905092915050565b60055481565b6060611aa16126fb565b600061080173ffffffffffffffffffffffffffffffffffffffff1663b46a8d613060046040518363ffffffff1660e01b8152600401611ae192919061406f565b6000604051808303816000875af1158015611b00573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611b299190614487565b905080600081518110611b3f57611b3e613bc0565b5b60200260200101516020015160036000828254611b5c9190613b2c565b9250508190555060006002600085815260200190815260200160002054905061080073ffffffffffffffffffffffffffffffffffffffff16633edab33c306004846040518463ffffffff1660e01b8152600401611bbb939291906144d0565b6020604051808303816000875af1158015611bda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfe919061450e565b50600082600081518110611c1557611c14613bc0565b5b60200260200101516020015182611c2c9190613b2c565b905060003373ffffffffffffffffffffffffffffffffffffffff1682604051611c5490613c68565b60006040518083038185875af1925050503d8060008114611c91576040519150601f19603f3d011682016040523d82523d6000602084013e611c96565b606091505b50509050600060026000888152602001908152602001600020819055506040518060400160405280601881526020017f53656e74204d6f6e657920746f2069646561206f776e65720000000000000000815250945050505050919050565b600d602052806000526040600020600091509050806000015490806001018054611d1d90613b8f565b80601f0160208091040260200160405190810160405280929190818152602001828054611d4990613b8f565b8015611d965780601f10611d6b57610100808354040283529160200191611d96565b820191906000526020600020905b815481529060010190602001808311611d7957829003601f168201915b5050505050905082565b60606000600a5467ffffffffffffffff811115611dc057611dbf6131a0565b5b604051908082528060200260200182016040528015611dee5781602001602082028036833780820191505090505b509050600080600090505b600a54811015611e785784601160008381526020019081526020016000206001015403611e65576011600082815260200190815260200160002060000154838381518110611e4a57611e49613bc0565b5b6020026020010181815250508180611e6190613bef565b9250505b8080611e7090613bef565b915050611df9565b508192505050919050565b60606000600b5467ffffffffffffffff811115611ea357611ea26131a0565b5b604051908082528060200260200182016040528015611ed15781602001602082028036833780820191505090505b509050600080600090505b600b54811015611f5b5784601260008381526020019081526020016000206001015403611f48576012600082815260200190815260200160002060000154838381518110611f2d57611f2c613bc0565b5b6020026020010181815250508180611f4490613bef565b9250505b8080611f5390613bef565b915050611edc565b508192505050919050565b600060405180606001604052808581526020018481526020018381525060106000600954815260200190815260200160002060008201518160000155602082015181600101556040820151816002019081611fc19190613ed8565b5090505060096000815480929190611fd890613bef565b919050555060095490509392505050565b81600c6000858152602001908152602001600020600001908161200c9190613ed8565b5080600c600085815260200190815260200160002060010190816120309190613ed8565b50505050565b6060600e6000838152602001908152602001600020600101805461205990613b8f565b80601f016020809104026020016040519081016040528092919081815260200182805461208590613b8f565b80156120d25780601f106120a7576101008083540402835291602001916120d2565b820191906000526020600020905b8154815290600101906020018083116120b557829003601f168201915b50505050509050919050565b600a5481565b6060600060075467ffffffffffffffff811115612104576121036131a0565b5b60405190808252806020026020018201604052801561213757816020015b60608152602001906001900390816121225790505b50905060005b60075481101561221757600e6000828152602001908152602001600020600101805461216890613b8f565b80601f016020809104026020016040519081016040528092919081815260200182805461219490613b8f565b80156121e15780601f106121b6576101008083540402835291602001916121e1565b820191906000526020600020905b8154815290600101906020018083116121c457829003601f168201915b50505050508282815181106121f9576121f8613bc0565b5b6020026020010181905250808061220f90613bef565b91505061213d565b508091505090565b600080600090505b600754811015612285578280519060200120600e600083815260200190815260200160002060010160405161225c9190613d15565b604051809103902003612272578091505061228b565b808061227d90613bef565b915050612227565b50600090505b919050565b80600e600084815260200190815260200160002060020160008282546122b69190613b2c565b925050819055505050565b61080073ffffffffffffffffffffffffffffffffffffffff166353266bbb306004846040518463ffffffff1660e01b8152600401612301939291906144d0565b6020604051808303816000875af1158015612320573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612344919061450e565b5050565b600b5481565b600080600090505b6007548110156123ca578280519060200120600e600083815260200190815260200160002060010160405161238b9190613d15565b6040518091039020036123b757600e6000828152602001908152602001600020600001549150506123d0565b80806123c290613bef565b915050612356565b50600090505b919050565b606061080173ffffffffffffffffffffffffffffffffffffffff16639ad563b43060046040518363ffffffff1660e01b815260040161241592919061406f565b600060405180830381865afa158015612432573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061245b91906146c8565b905090565b60005b6005548110156124c657600c6000828152602001908152602001600020600080820160006124919190612e5c565b6001820160006124a19190612e5c565b6002820160006124b19190612e5c565b505080806124be90613bef565b915050612463565b5060005b60065481101561251557600d60008281526020019081526020016000206000808201600090556001820160006125009190612e5c565b5050808061250d90613bef565b9150506124ca565b5060005b60075481101561256c57600e600082815260200190815260200160002060008082016000905560018201600061254f9190612e5c565b60028201600090555050808061256490613bef565b915050612519565b5060005b6006548110156125c357600f600082815260200190815260200160002060008082016000905560018201600090556002820160006125ae9190612e5c565b505080806125bb90613bef565b915050612570565b5060005b600a5481101561261a576011600082815260200190815260200160002060008082016000905560018201600090556002820160006126059190612e5c565b5050808061261290613bef565b9150506125c7565b5060005b600b548110156126715760126000828152602001908152602001600020600080820160009055600182016000905560028201600061265c9190612e5c565b5050808061266990613bef565b91505061261e565b5060005b6009548110156126c8576010600082815260200190815260200160002060008082016000905560018201600090556002820160006126b39190612e5c565b505080806126c090613bef565b915050612675565b506000600581905550600060068190555060006007819055506000600a819055506000600b819055506000600981905550565b600061080073ffffffffffffffffffffffffffffffffffffffff1663b6039895327fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60006040518463ffffffff1660e01b815260040161275d9392919061484a565b6020604051808303816000875af115801561277c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a091906148c0565b9050806127e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127d990614939565b60405180910390fd5b600061080173ffffffffffffffffffffffffffffffffffffffff16637a9841ed3260016040518363ffffffff1660e01b8152600401612822929190614959565b6020604051808303816000875af1158015612841573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061286591906148c0565b9050806128a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161289e906149d5565b60405180910390fd5b5050565b60116020528060005260406000206000915090508060000154908060010154908060020180546128da90613b8f565b80601f016020809104026020016040519081016040528092919081815260200182805461290690613b8f565b80156129535780601f1061292857610100808354040283529160200191612953565b820191906000526020600020905b81548152906001019060200180831161293657829003601f168201915b5050505050905083565b80600e600084815260200190815260200160002060010190816129809190613ed8565b505050565b6060600060055467ffffffffffffffff8111156129a5576129a46131a0565b5b6040519080825280602002602001820160405280156129d857816020015b60608152602001906001900390816129c35790505b50905060005b600554811015612ab857600c60008281526020019081526020016000206001018054612a0990613b8f565b80601f0160208091040260200160405190810160405280929190818152602001828054612a3590613b8f565b8015612a825780601f10612a5757610100808354040283529160200191612a82565b820191906000526020600020905b815481529060010190602001808311612a6557829003601f168201915b5050505050828281518110612a9a57612a99613bc0565b5b60200260200101819052508080612ab090613bef565b9150506129de565b508091505090565b80600d60008481526020019081526020016000206001019081612ae39190613ed8565b505050565b600060405180606001604052808481526020018381526020016040518060400160405280600581526020017f46616c7365000000000000000000000000000000000000000000000000000000815250815250600c600060055481526020019081526020016000206000820151816000019081612b649190613ed8565b506020820151816001019081612b7a9190613ed8565b506040820151816002019081612b909190613ed8565b5090505060056000815480929190612ba790613bef565b9190505550600554905092915050565b60075481565b600060405180606001604052808481526020018581526020016000815250600e60006007548152602001908152602001600020600082015181600001556020820151816001019081612c0f9190613ed8565b506040820151816002015590505060076000815480929190612c3090613bef565b919050555060005b8251811015612c9557612c6a600754600854858481518110612c5d57612c5c613bc0565b5b6020026020010151612dfc565b60086000815480929190612c7d90613bef565b91905055508080612c8d90613bef565b915050612c38565b5060075490509392505050565b6060600d60008381526020019081526020016000206001018054612cc590613b8f565b80601f0160208091040260200160405190810160405280929190818152602001828054612cf190613b8f565b8015612d3e5780601f10612d1357610100808354040283529160200191612d3e565b820191906000526020600020905b815481529060010190602001808311612d2157829003601f168201915b50505050509050919050565b600f602052806000526040600020600091509050806000015490806001015490806002018054612d7990613b8f565b80601f0160208091040260200160405190810160405280929190818152602001828054612da590613b8f565b8015612df25780601f10612dc757610100808354040283529160200191612df2565b820191906000526020600020905b815481529060010190602001808311612dd557829003601f168201915b5050505050905083565b604051806060016040528084815260200183815260200182815250600f600084815260200190815260200160002060008201518160000155602082015181600101556040820151816002019081612e539190613ed8565b50905050505050565b508054612e6890613b8f565b6000825580601f10612e7a5750612e99565b601f016020900490600052602060002090810190612e989190612e9c565b5b50565b5b80821115612eb5576000816000905550600101612e9d565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b612ee081612ecd565b8114612eeb57600080fd5b50565b600081359050612efd81612ed7565b92915050565b60008060408385031215612f1a57612f19612ec3565b5b6000612f2885828601612eee565b9250506020612f3985828601612eee565b9150509250929050565b600060208284031215612f5957612f58612ec3565b5b6000612f6784828501612eee565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612fd6578082015181840152602081019050612fbb565b60008484015250505050565b6000601f19601f8301169050919050565b6000612ffe82612f9c565b6130088185612fa7565b9350613018818560208601612fb8565b61302181612fe2565b840191505092915050565b60006130388383612ff3565b905092915050565b6000602082019050919050565b600061305882612f70565b6130628185612f7b565b93508360208202850161307485612f8c565b8060005b858110156130b05784840389528151613091858261302c565b945061309c83613040565b925060208a01995050600181019050613078565b50829750879550505050505092915050565b600060208201905081810360008301526130dc818461304d565b905092915050565b6130ed81612ecd565b82525050565b600060208201905061310860008301846130e4565b92915050565b600082825260208201905092915050565b600061312a82612f9c565b613134818561310e565b9350613144818560208601612fb8565b61314d81612fe2565b840191505092915050565b600060608201905061316d60008301866130e4565b61317a60208301856130e4565b818103604083015261318c818461311f565b9050949350505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6131d882612fe2565b810181811067ffffffffffffffff821117156131f7576131f66131a0565b5b80604052505050565b600061320a612eb9565b905061321682826131cf565b919050565b600067ffffffffffffffff821115613236576132356131a0565b5b61323f82612fe2565b9050602081019050919050565b82818337600083830152505050565b600061326e6132698461321b565b613200565b90508281526020810184848401111561328a5761328961319b565b5b61329584828561324c565b509392505050565b600082601f8301126132b2576132b1613196565b5b81356132c284826020860161325b565b91505092915050565b6000602082840312156132e1576132e0612ec3565b5b600082013567ffffffffffffffff8111156132ff576132fe612ec8565b5b61330b8482850161329d565b91505092915050565b6000606082019050818103600083015261332e818661311f565b90508181036020830152613342818561311f565b90508181036040830152613356818461311f565b9050949350505050565b6000806040838503121561337757613376612ec3565b5b600061338585828601612eee565b925050602083013567ffffffffffffffff8111156133a6576133a5612ec8565b5b6133b28582860161329d565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60008160070b9050919050565b6133fe816133e8565b82525050565b61340d81612ecd565b82525050565b60808201600082015161342960008501826133f5565b50602082015161343c60208501826133f5565b50604082015161344f6040850182613404565b5060608201516134626060850182613404565b50505050565b60006134748383613413565b60808301905092915050565b6000602082019050919050565b6000613498826133bc565b6134a281856133c7565b93506134ad836133d8565b8060005b838110156134de5781516134c58882613468565b97506134d083613480565b9250506001810190506134b1565b5085935050505092915050565b60006020820190508181036000830152613505818461348d565b905092915050565b600060608201905061352260008301866130e4565b8181036020830152613534818561311f565b905061354360408301846130e4565b949350505050565b60006020820190508181036000830152613565818461311f565b905092915050565b6000806040838503121561358457613583612ec3565b5b600083013567ffffffffffffffff8111156135a2576135a1612ec8565b5b6135ae8582860161329d565b92505060206135bf85828601612eee565b9150509250929050565b60006040820190506135de60008301856130e4565b81810360208301526135f0818461311f565b90509392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006136318383613404565b60208301905092915050565b6000602082019050919050565b6000613655826135f9565b61365f8185613604565b935061366a83613615565b8060005b8381101561369b5781516136828882613625565b975061368d8361363d565b92505060018101905061366e565b5085935050505092915050565b600060208201905081810360008301526136c2818461364a565b905092915050565b6000806000606084860312156136e3576136e2612ec3565b5b60006136f186828701612eee565b935050602061370286828701612eee565b925050604084013567ffffffffffffffff81111561372357613722612ec8565b5b61372f8682870161329d565b9150509250925092565b60008060006060848603121561375257613751612ec3565b5b600061376086828701612eee565b935050602084013567ffffffffffffffff81111561378157613780612ec8565b5b61378d8682870161329d565b925050604084013567ffffffffffffffff8111156137ae576137ad612ec8565b5b6137ba8682870161329d565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060ff82169050919050565b613806816137f0565b82525050565b600060608301600083015184820360008601526138298282612ff3565b915050602083015161383e6020860182613404565b50604083015161385160408601826137fd565b508091505092915050565b6000613868838361380c565b905092915050565b6000602082019050919050565b6000613888826137c4565b61389281856137cf565b9350836020820285016138a4856137e0565b8060005b858110156138e057848403895281516138c1858261385c565b94506138cc83613870565b925060208a019950506001810190506138a8565b50829750879550505050505092915050565b6000602082019050818103600083015261390c818461387d565b905092915050565b6000806040838503121561392b5761392a612ec3565b5b600083013567ffffffffffffffff81111561394957613948612ec8565b5b6139558582860161329d565b925050602083013567ffffffffffffffff81111561397657613975612ec8565b5b6139828582860161329d565b9150509250929050565b600067ffffffffffffffff8211156139a7576139a66131a0565b5b602082029050602081019050919050565b600080fd5b60006139d06139cb8461398c565b613200565b905080838252602082019050602084028301858111156139f3576139f26139b8565b5b835b81811015613a3a57803567ffffffffffffffff811115613a1857613a17613196565b5b808601613a25898261329d565b855260208501945050506020810190506139f5565b5050509392505050565b600082601f830112613a5957613a58613196565b5b8135613a698482602086016139bd565b91505092915050565b600080600060608486031215613a8b57613a8a612ec3565b5b600084013567ffffffffffffffff811115613aa957613aa8612ec8565b5b613ab58682870161329d565b9350506020613ac686828701612eee565b925050604084013567ffffffffffffffff811115613ae757613ae6612ec8565b5b613af386828701613a44565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613b3782612ecd565b9150613b4283612ecd565b9250828201905080821115613b5a57613b59613afd565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613ba757607f821691505b602082108103613bba57613bb9613b60565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613bfa82612ecd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613c2c57613c2b613afd565b5b600182019050919050565b600081905092915050565b50565b6000613c52600083613c37565b9150613c5d82613c42565b600082019050919050565b6000613c7382613c45565b9150819050919050565b60008190508160005260206000209050919050565b60008154613c9f81613b8f565b613ca98186613c37565b94506001821660008114613cc45760018114613cd957613d0c565b60ff1983168652811515820286019350613d0c565b613ce285613c7d565b60005b83811015613d0457815481890152600182019150602081019050613ce5565b838801955050505b50505092915050565b6000613d218284613c92565b915081905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613d8e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613d51565b613d988683613d51565b95508019841693508086168417925050509392505050565b6000819050919050565b6000613dd5613dd0613dcb84612ecd565b613db0565b612ecd565b9050919050565b6000819050919050565b613def83613dba565b613e03613dfb82613ddc565b848454613d5e565b825550505050565b600090565b613e18613e0b565b613e23818484613de6565b505050565b5b81811015613e4757613e3c600082613e10565b600181019050613e29565b5050565b601f821115613e8c57613e5d81613d2c565b613e6684613d41565b81016020851015613e75578190505b613e89613e8185613d41565b830182613e28565b50505b505050565b600082821c905092915050565b6000613eaf60001984600802613e91565b1980831691505092915050565b6000613ec88383613e9e565b9150826002028217905092915050565b613ee182612f9c565b67ffffffffffffffff811115613efa57613ef96131a0565b5b613f048254613b8f565b613f0f828285613e4b565b600060209050601f831160018114613f425760008415613f30578287015190505b613f3a8582613ebc565b865550613fa2565b601f198416613f5086613d2c565b60005b82811015613f7857848901518255600182019150602085019450602081019050613f53565b86831015613f955784890151613f91601f891682613e9e565b8355505b6001600288020188555050505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613fd582613faa565b9050919050565b613fe581613fca565b82525050565b60008154613ff881613b8f565b614002818661310e565b9450600182166000811461401d576001811461403357614066565b60ff198316865281151560200286019350614066565b61403c85613d2c565b60005b8381101561405e5781548189015260018201915060208101905061403f565b808801955050505b50505092915050565b60006040820190506140846000830185613fdc565b81810360208301526140968184613feb565b90509392505050565b600067ffffffffffffffff8211156140ba576140b96131a0565b5b602082029050602081019050919050565b600080fd5b600080fd5b6140de816133e8565b81146140e957600080fd5b50565b6000815190506140fb816140d5565b92915050565b60008151905061411081612ed7565b92915050565b60006080828403121561412c5761412b6140cb565b5b6141366080613200565b90506000614146848285016140ec565b600083015250602061415a848285016140ec565b602083015250604061416e84828501614101565b604083015250606061418284828501614101565b60608301525092915050565b60006141a161419c8461409f565b613200565b905080838252602082019050608084028301858111156141c4576141c36139b8565b5b835b818110156141ed57806141d98882614116565b8452602084019350506080810190506141c6565b5050509392505050565b600082601f83011261420c5761420b613196565b5b815161421c84826020860161418e565b91505092915050565b60006020828403121561423b5761423a612ec3565b5b600082015167ffffffffffffffff81111561425957614258612ec8565b5b614265848285016141f7565b91505092915050565b600061428161427c8461321b565b613200565b90508281526020810184848401111561429d5761429c61319b565b5b6142a8848285612fb8565b509392505050565b600082601f8301126142c5576142c4613196565b5b81516142d584826020860161426e565b91505092915050565b6000604082840312156142f4576142f36140cb565b5b6142fe6040613200565b9050600082015167ffffffffffffffff81111561431e5761431d6140d0565b5b61432a848285016142b0565b600083015250602061433e84828501614101565b60208301525092915050565b6000806040838503121561436157614360612ec3565b5b600061436f85828601614101565b925050602083015167ffffffffffffffff8111156143905761438f612ec8565b5b61439c858286016142de565b9150509250929050565b600067ffffffffffffffff8211156143c1576143c06131a0565b5b602082029050602081019050919050565b60006143e56143e0846143a6565b613200565b90508083825260208201905060208402830185811115614408576144076139b8565b5b835b8181101561444f57805167ffffffffffffffff81111561442d5761442c613196565b5b80860161443a89826142de565b8552602085019450505060208101905061440a565b5050509392505050565b600082601f83011261446e5761446d613196565b5b815161447e8482602086016143d2565b91505092915050565b60006020828403121561449d5761449c612ec3565b5b600082015167ffffffffffffffff8111156144bb576144ba612ec8565b5b6144c784828501614459565b91505092915050565b60006060820190506144e56000830186613fdc565b81810360208301526144f78185613feb565b905061450660408301846130e4565b949350505050565b60006020828403121561452457614523612ec3565b5b6000614532848285016140ec565b91505092915050565b600067ffffffffffffffff821115614556576145556131a0565b5b602082029050602081019050919050565b614570816137f0565b811461457b57600080fd5b50565b60008151905061458d81614567565b92915050565b6000606082840312156145a9576145a86140cb565b5b6145b36060613200565b9050600082015167ffffffffffffffff8111156145d3576145d26140d0565b5b6145df848285016142b0565b60008301525060206145f384828501614101565b60208301525060406146078482850161457e565b60408301525092915050565b60006146266146218461453b565b613200565b90508083825260208201905060208402830185811115614649576146486139b8565b5b835b8181101561469057805167ffffffffffffffff81111561466e5761466d613196565b5b80860161467b8982614593565b8552602085019450505060208101905061464b565b5050509392505050565b600082601f8301126146af576146ae613196565b5b81516146bf848260208601614613565b91505092915050565b6000602082840312156146de576146dd612ec3565b5b600082015167ffffffffffffffff8111156146fc576146fb612ec8565b5b6147088482850161469a565b91505092915050565b600081549050919050565b60008190508160005260206000209050919050565b6000815461473e81613b8f565b6147488186612fa7565b945060018216600081146147635760018114614779576147ac565b60ff1983168652811515602002860193506147ac565b61478285613d2c565b60005b838110156147a457815481890152600182019150602081019050614785565b808801955050505b50505092915050565b60006147c18383614731565b905092915050565b6000600182019050919050565b60006147e182614711565b6147eb8185612f7b565b9350836020820285016147fd8561471c565b8060005b858110156148385784840389528161481985826147b5565b9450614824836147c9565b925060208a01995050600181019050614801565b50829750879550505050505092915050565b600060608201905061485f6000830186613fdc565b61486c60208301856130e4565b818103604083015261487e81846147d6565b9050949350505050565b60008115159050919050565b61489d81614888565b81146148a857600080fd5b50565b6000815190506148ba81614894565b92915050565b6000602082840312156148d6576148d5612ec3565b5b60006148e4848285016148ab565b91505092915050565b7f5374616b696e6720417070726f7665206661696c656400000000000000000000600082015250565b600061492360168361310e565b915061492e826148ed565b602082019050919050565b6000602082019050818103600083015261495281614916565b9050919050565b600060408201905061496e6000830185613fdc565b818103602083015261498081846147d6565b90509392505050565b7f446973747269627574696f6e20417070726f7665206661696c65640000000000600082015250565b60006149bf601b8361310e565b91506149ca82614989565b602082019050919050565b600060208201905081810360008301526149ee816149b2565b905091905056fea2646970667358221220d55721b5d9a50ad0201a19dfe32c7eca381a4ee4d4c390256db97ada705bc5b064736f6c634300081100332f636f736d6f732e7374616b696e672e763162657461312e4d7367426567696e526564656c656761746565766d6f7376616c6f7065723135387777617334763666676375327833706c67373073367530666d306c6c653233376b6c74722f636f736d6f732e7374616b696e672e763162657461312e4d7367556e64656c65676174652f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f725265776172642f636f736d6f732e7374616b696e672e763162657461312e4d736744656c6567617465",
  "deployedBytecode": "0x6080604052600436106102ae5760003560e01c80637f2035d411610175578063aa4cdf2a116100dc578063c04fe97811610095578063d3791b201161006f578063d3791b2014610b96578063e3280c9614610bc1578063e32acc1a14610bfe578063ff4a37ef14610c3b576102ae565b8063c04fe97814610b05578063c29595c514610b30578063c4c2e36414610b59576102ae565b8063aa4cdf2a14610a07578063ae429e4714610a44578063b16060a614610a6f578063b2947c7114610a86578063b527d45e14610a9d578063c04e743014610adc576102ae565b80639077007d1161012e5780639077007d146108f757806397ee760614610922578063a1ca91781461094d578063a2cdb3a91461098a578063a694fc3a146109b3578063aa2bf5d3146109dc576102ae565b80637f2035d41461079c578063803f5b9f146107da578063812fae1f1461081757806382fcc73214610854578063881de858146108915780638d3d2595146108ba576102ae565b8063414d9a2b116102195780635d907da1116101d25780635d907da1146106525780636af3304e1461068f5780636f9fb98a146106cc57806371085cab146106f75780637bbd582d146107345780637e22cd111461075f576102ae565b8063414d9a2b1461051857806342c7652a14610555578063468d0c80146105805780634a797bd7146105bf5780634be7adb5146105ea57806353f6880214610627576102ae565b80631ba44c4c1161026b5780631ba44c4c146103b65780631e9ac9f5146103f557806327a568b91461043257806329b56f60146104715780632d5bf5b01461049c5780633f87a2f4146104d9576102ae565b80630cdd53f6146102b3578063109ac970146102cf578063131d44f21461030c57806313bf4cea146103495780631b52b9de146103745780631b592aeb1461038b575b600080fd5b6102cd60048036038101906102c89190612f03565b610c7a565b005b3480156102db57600080fd5b506102f660048036038101906102f19190612f43565b610cb0565b60405161030391906130c2565b60405180910390f35b34801561031857600080fd5b50610333600480360381019061032e9190612f43565b610e1f565b60405161034091906130c2565b60405180910390f35b34801561035557600080fd5b5061035e610f8e565b60405161036b91906130f3565b60405180910390f35b34801561038057600080fd5b50610389610f94565b005b34801561039757600080fd5b506103a0611009565b6040516103ad91906130f3565b60405180910390f35b3480156103c257600080fd5b506103dd60048036038101906103d89190612f43565b61100f565b6040516103ec93929190613158565b60405180910390f35b34801561040157600080fd5b5061041c600480360381019061041791906132cb565b6110c1565b60405161042991906130f3565b60405180910390f35b34801561043e57600080fd5b5061045960048036038101906104549190612f43565b611132565b60405161046893929190613314565b60405180910390f35b34801561047d57600080fd5b506104866112f4565b60405161049391906130c2565b60405180910390f35b3480156104a857600080fd5b506104c360048036038101906104be9190613360565b61142f565b6040516104d091906130f3565b60405180910390f35b3480156104e557600080fd5b5061050060048036038101906104fb9190612f43565b6114b3565b60405161050f93929190613158565b60405180910390f35b34801561052457600080fd5b5061053f600480360381019061053a9190612f43565b611565565b60405161054c91906130f3565b60405180910390f35b34801561056157600080fd5b5061056a61157d565b60405161057791906134eb565b60405180910390f35b34801561058c57600080fd5b506105a760048036038101906105a29190612f43565b611608565b6040516105b69392919061350d565b60405180910390f35b3480156105cb57600080fd5b506105d46116ba565b6040516105e191906130f3565b60405180910390f35b3480156105f657600080fd5b50610611600480360381019061060c9190612f03565b6116c0565b60405161061e91906130c2565b60405180910390f35b34801561063357600080fd5b5061063c611852565b60405161064991906130f3565b60405180910390f35b34801561065e57600080fd5b5061067960048036038101906106749190612f43565b6118eb565b604051610686919061354b565b60405180910390f35b34801561069b57600080fd5b506106b660048036038101906106b19190613360565b611993565b6040516106c391906130f3565b60405180910390f35b3480156106d857600080fd5b506106e1611a17565b6040516106ee91906130f3565b60405180910390f35b34801561070357600080fd5b5061071e6004803603810190610719919061356d565b611a1f565b60405161072b91906130f3565b60405180910390f35b34801561074057600080fd5b50610749611a91565b60405161075691906130f3565b60405180910390f35b34801561076b57600080fd5b5061078660048036038101906107819190612f43565b611a97565b604051610793919061354b565b60405180910390f35b3480156107a857600080fd5b506107c360048036038101906107be9190612f43565b611cf4565b6040516107d19291906135c9565b60405180910390f35b3480156107e657600080fd5b5061080160048036038101906107fc9190612f43565b611da0565b60405161080e91906136a8565b60405180910390f35b34801561082357600080fd5b5061083e60048036038101906108399190612f43565b611e83565b60405161084b91906136a8565b60405180910390f35b34801561086057600080fd5b5061087b600480360381019061087691906136ca565b611f66565b60405161088891906130f3565b60405180910390f35b34801561089d57600080fd5b506108b860048036038101906108b39190613739565b611fe9565b005b3480156108c657600080fd5b506108e160048036038101906108dc9190612f43565b612036565b6040516108ee919061354b565b60405180910390f35b34801561090357600080fd5b5061090c6120de565b60405161091991906130f3565b60405180910390f35b34801561092e57600080fd5b506109376120e4565b60405161094491906130c2565b60405180910390f35b34801561095957600080fd5b50610974600480360381019061096f91906132cb565b61221f565b60405161098191906130f3565b60405180910390f35b34801561099657600080fd5b506109b160048036038101906109ac9190612f03565b612290565b005b3480156109bf57600080fd5b506109da60048036038101906109d59190612f43565b6122c1565b005b3480156109e857600080fd5b506109f1612348565b6040516109fe91906130f3565b60405180910390f35b348015610a1357600080fd5b50610a2e6004803603810190610a2991906132cb565b61234e565b604051610a3b91906130f3565b60405180910390f35b348015610a5057600080fd5b50610a596123d5565b604051610a6691906138f2565b60405180910390f35b348015610a7b57600080fd5b50610a84612460565b005b348015610a9257600080fd5b50610a9b6126fb565b005b348015610aa957600080fd5b50610ac46004803603810190610abf9190612f43565b6128ab565b604051610ad393929190613158565b60405180910390f35b348015610ae857600080fd5b50610b036004803603810190610afe9190613360565b61295d565b005b348015610b1157600080fd5b50610b1a612985565b604051610b2791906130c2565b60405180910390f35b348015610b3c57600080fd5b50610b576004803603810190610b529190613360565b612ac0565b005b348015610b6557600080fd5b50610b806004803603810190610b7b9190613914565b612ae8565b604051610b8d91906130f3565b60405180910390f35b348015610ba257600080fd5b50610bab612bb7565b604051610bb891906130f3565b60405180910390f35b348015610bcd57600080fd5b50610be86004803603810190610be39190613a72565b612bbd565b604051610bf591906130f3565b60405180910390f35b348015610c0a57600080fd5b50610c256004803603810190610c209190612f43565b612ca2565b604051610c32919061354b565b60405180910390f35b348015610c4757600080fd5b50610c626004803603810190610c5d9190612f43565b612d4a565b604051610c7193929190613158565b60405180910390f35b610c826126fb565b80600260008481526020019081526020016000206000828254610ca59190613b2c565b925050819055505050565b6060600060065467ffffffffffffffff811115610cd057610ccf6131a0565b5b604051908082528060200260200182016040528015610d0357816020015b6060815260200190600190039081610cee5790505b509050600080600090505b600654811015610e145784600d60008381526020019081526020016000206000015403610e0157600d60008281526020019081526020016000206001018054610d5690613b8f565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8290613b8f565b8015610dcf5780601f10610da457610100808354040283529160200191610dcf565b820191906000526020600020905b815481529060010190602001808311610db257829003601f168201915b5050505050838381518110610de757610de6613bc0565b5b60200260200101819052508180610dfd90613bef565b9250505b8080610e0c90613bef565b915050610d0e565b508192505050919050565b6060600060075467ffffffffffffffff811115610e3f57610e3e6131a0565b5b604051908082528060200260200182016040528015610e7257816020015b6060815260200190600190039081610e5d5790505b509050600080600090505b600754811015610f835784600e60008381526020019081526020016000206000015403610f6257600e60008281526020019081526020016000206001018054610ec590613b8f565b80601f0160208091040260200160405190810160405280929190818152602001828054610ef190613b8f565b8015610f3e5780601f10610f1357610100808354040283529160200191610f3e565b820191906000526020600020905b815481529060010190602001808311610f2157829003601f168201915b5050505050838381518110610f5657610f55613bc0565b5b60200260200101819052505b8180610f6d90613bef565b9250508080610f7b90613bef565b915050610e7d565b508192505050919050565b60065481565b600047905060003373ffffffffffffffffffffffffffffffffffffffff1682604051610fbf90613c68565b60006040518083038185875af1925050503d8060008114610ffc576040519150601f19603f3d011682016040523d82523d6000602084013e611001565b606091505b505090505050565b60085481565b601060205280600052604060002060009150905080600001549080600101549080600201805461103e90613b8f565b80601f016020809104026020016040519081016040528092919081815260200182805461106a90613b8f565b80156110b75780601f1061108c576101008083540402835291602001916110b7565b820191906000526020600020905b81548152906001019060200180831161109a57829003601f168201915b5050505050905083565b600080600090505b600654811015611127578280519060200120600d60008381526020019081526020016000206001016040516110fe9190613d15565b604051809103902003611114578091505061112d565b808061111f90613bef565b9150506110c9565b50600090505b919050565b600c60205280600052604060002060009150905080600001805461115590613b8f565b80601f016020809104026020016040519081016040528092919081815260200182805461118190613b8f565b80156111ce5780601f106111a3576101008083540402835291602001916111ce565b820191906000526020600020905b8154815290600101906020018083116111b157829003601f168201915b5050505050908060010180546111e390613b8f565b80601f016020809104026020016040519081016040528092919081815260200182805461120f90613b8f565b801561125c5780601f106112315761010080835404028352916020019161125c565b820191906000526020600020905b81548152906001019060200180831161123f57829003601f168201915b50505050509080600201805461127190613b8f565b80601f016020809104026020016040519081016040528092919081815260200182805461129d90613b8f565b80156112ea5780601f106112bf576101008083540402835291602001916112ea565b820191906000526020600020905b8154815290600101906020018083116112cd57829003601f168201915b5050505050905083565b6060600060065467ffffffffffffffff811115611314576113136131a0565b5b60405190808252806020026020018201604052801561134757816020015b60608152602001906001900390816113325790505b50905060005b60065481101561142757600d6000828152602001908152602001600020600101805461137890613b8f565b80601f01602080910402602001604051908101604052809291908181526020018280546113a490613b8f565b80156113f15780601f106113c6576101008083540402835291602001916113f1565b820191906000526020600020905b8154815290600101906020018083116113d457829003601f168201915b505050505082828151811061140957611408613bc0565b5b6020026020010181905250808061141f90613bef565b91505061134d565b508091505090565b60006040518060600160405280600a5481526020018481526020018381525060116000600a5481526020019081526020016000206000820151816000015560208201518160010155604082015181600201908161148c9190613ed8565b50905050600a60008154809291906114a390613bef565b9190505550600a54905092915050565b60126020528060005260406000206000915090508060000154908060010154908060020180546114e290613b8f565b80601f016020809104026020016040519081016040528092919081815260200182805461150e90613b8f565b801561155b5780601f106115305761010080835404028352916020019161155b565b820191906000526020600020905b81548152906001019060200180831161153e57829003601f168201915b5050505050905083565b60026020528060005260406000206000915090505481565b606061080073ffffffffffffffffffffffffffffffffffffffff1663a03ffee13060046040518363ffffffff1660e01b81526004016115bd92919061406f565b600060405180830381865afa1580156115da573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906116039190614225565b905090565b600e60205280600052604060002060009150905080600001549080600101805461163190613b8f565b80601f016020809104026020016040519081016040528092919081815260200182805461165d90613b8f565b80156116aa5780601f1061167f576101008083540402835291602001916116aa565b820191906000526020600020905b81548152906001019060200180831161168d57829003601f168201915b5050505050908060020154905083565b60095481565b6060600060095467ffffffffffffffff8111156116e0576116df6131a0565b5b60405190808252806020026020018201604052801561171357816020015b60608152602001906001900390816116fe5790505b509050600080600090505b600954811015611846578560106000838152602001908152602001600020600001541480156117625750846010600083815260200190815260200160002060010154145b156118255760106000828152602001908152602001600020600201805461178890613b8f565b80601f01602080910402602001604051908101604052809291908181526020018280546117b490613b8f565b80156118015780601f106117d657610100808354040283529160200191611801565b820191906000526020600020905b8154815290600101906020018083116117e457829003601f168201915b505050505083838151811061181957611818613bc0565b5b60200260200101819052505b818061183090613bef565b925050808061183e90613bef565b91505061171e565b50819250505092915050565b600080600061080073ffffffffffffffffffffffffffffffffffffffff1663241774e63060046040518363ffffffff1660e01b815260040161189592919061406f565b600060405180830381865afa1580156118b2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906118db919061434a565b9150915080602001519250505090565b6060600c6000838152602001908152602001600020600101805461190e90613b8f565b80601f016020809104026020016040519081016040528092919081815260200182805461193a90613b8f565b80156119875780601f1061195c57610100808354040283529160200191611987565b820191906000526020600020905b81548152906001019060200180831161196a57829003601f168201915b50505050509050919050565b60006040518060600160405280600b5481526020018481526020018381525060126000600b548152602001908152602001600020600082015181600001556020820151816001015560408201518160020190816119f09190613ed8565b50905050600b6000815480929190611a0790613bef565b9190505550600b54905092915050565b600047905090565b6000604051806040016040528083815260200184815250600d60006006548152602001908152602001600020600082015181600001556020820151816001019081611a6a9190613ed8565b5090505060066000815480929190611a8190613bef565b9190505550600654905092915050565b60055481565b6060611aa16126fb565b600061080173ffffffffffffffffffffffffffffffffffffffff1663b46a8d613060046040518363ffffffff1660e01b8152600401611ae192919061406f565b6000604051808303816000875af1158015611b00573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611b299190614487565b905080600081518110611b3f57611b3e613bc0565b5b60200260200101516020015160036000828254611b5c9190613b2c565b9250508190555060006002600085815260200190815260200160002054905061080073ffffffffffffffffffffffffffffffffffffffff16633edab33c306004846040518463ffffffff1660e01b8152600401611bbb939291906144d0565b6020604051808303816000875af1158015611bda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfe919061450e565b50600082600081518110611c1557611c14613bc0565b5b60200260200101516020015182611c2c9190613b2c565b905060003373ffffffffffffffffffffffffffffffffffffffff1682604051611c5490613c68565b60006040518083038185875af1925050503d8060008114611c91576040519150601f19603f3d011682016040523d82523d6000602084013e611c96565b606091505b50509050600060026000888152602001908152602001600020819055506040518060400160405280601881526020017f53656e74204d6f6e657920746f2069646561206f776e65720000000000000000815250945050505050919050565b600d602052806000526040600020600091509050806000015490806001018054611d1d90613b8f565b80601f0160208091040260200160405190810160405280929190818152602001828054611d4990613b8f565b8015611d965780601f10611d6b57610100808354040283529160200191611d96565b820191906000526020600020905b815481529060010190602001808311611d7957829003601f168201915b5050505050905082565b60606000600a5467ffffffffffffffff811115611dc057611dbf6131a0565b5b604051908082528060200260200182016040528015611dee5781602001602082028036833780820191505090505b509050600080600090505b600a54811015611e785784601160008381526020019081526020016000206001015403611e65576011600082815260200190815260200160002060000154838381518110611e4a57611e49613bc0565b5b6020026020010181815250508180611e6190613bef565b9250505b8080611e7090613bef565b915050611df9565b508192505050919050565b60606000600b5467ffffffffffffffff811115611ea357611ea26131a0565b5b604051908082528060200260200182016040528015611ed15781602001602082028036833780820191505090505b509050600080600090505b600b54811015611f5b5784601260008381526020019081526020016000206001015403611f48576012600082815260200190815260200160002060000154838381518110611f2d57611f2c613bc0565b5b6020026020010181815250508180611f4490613bef565b9250505b8080611f5390613bef565b915050611edc565b508192505050919050565b600060405180606001604052808581526020018481526020018381525060106000600954815260200190815260200160002060008201518160000155602082015181600101556040820151816002019081611fc19190613ed8565b5090505060096000815480929190611fd890613bef565b919050555060095490509392505050565b81600c6000858152602001908152602001600020600001908161200c9190613ed8565b5080600c600085815260200190815260200160002060010190816120309190613ed8565b50505050565b6060600e6000838152602001908152602001600020600101805461205990613b8f565b80601f016020809104026020016040519081016040528092919081815260200182805461208590613b8f565b80156120d25780601f106120a7576101008083540402835291602001916120d2565b820191906000526020600020905b8154815290600101906020018083116120b557829003601f168201915b50505050509050919050565b600a5481565b6060600060075467ffffffffffffffff811115612104576121036131a0565b5b60405190808252806020026020018201604052801561213757816020015b60608152602001906001900390816121225790505b50905060005b60075481101561221757600e6000828152602001908152602001600020600101805461216890613b8f565b80601f016020809104026020016040519081016040528092919081815260200182805461219490613b8f565b80156121e15780601f106121b6576101008083540402835291602001916121e1565b820191906000526020600020905b8154815290600101906020018083116121c457829003601f168201915b50505050508282815181106121f9576121f8613bc0565b5b6020026020010181905250808061220f90613bef565b91505061213d565b508091505090565b600080600090505b600754811015612285578280519060200120600e600083815260200190815260200160002060010160405161225c9190613d15565b604051809103902003612272578091505061228b565b808061227d90613bef565b915050612227565b50600090505b919050565b80600e600084815260200190815260200160002060020160008282546122b69190613b2c565b925050819055505050565b61080073ffffffffffffffffffffffffffffffffffffffff166353266bbb306004846040518463ffffffff1660e01b8152600401612301939291906144d0565b6020604051808303816000875af1158015612320573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612344919061450e565b5050565b600b5481565b600080600090505b6007548110156123ca578280519060200120600e600083815260200190815260200160002060010160405161238b9190613d15565b6040518091039020036123b757600e6000828152602001908152602001600020600001549150506123d0565b80806123c290613bef565b915050612356565b50600090505b919050565b606061080173ffffffffffffffffffffffffffffffffffffffff16639ad563b43060046040518363ffffffff1660e01b815260040161241592919061406f565b600060405180830381865afa158015612432573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061245b91906146c8565b905090565b60005b6005548110156124c657600c6000828152602001908152602001600020600080820160006124919190612e5c565b6001820160006124a19190612e5c565b6002820160006124b19190612e5c565b505080806124be90613bef565b915050612463565b5060005b60065481101561251557600d60008281526020019081526020016000206000808201600090556001820160006125009190612e5c565b5050808061250d90613bef565b9150506124ca565b5060005b60075481101561256c57600e600082815260200190815260200160002060008082016000905560018201600061254f9190612e5c565b60028201600090555050808061256490613bef565b915050612519565b5060005b6006548110156125c357600f600082815260200190815260200160002060008082016000905560018201600090556002820160006125ae9190612e5c565b505080806125bb90613bef565b915050612570565b5060005b600a5481101561261a576011600082815260200190815260200160002060008082016000905560018201600090556002820160006126059190612e5c565b5050808061261290613bef565b9150506125c7565b5060005b600b548110156126715760126000828152602001908152602001600020600080820160009055600182016000905560028201600061265c9190612e5c565b5050808061266990613bef565b91505061261e565b5060005b6009548110156126c8576010600082815260200190815260200160002060008082016000905560018201600090556002820160006126b39190612e5c565b505080806126c090613bef565b915050612675565b506000600581905550600060068190555060006007819055506000600a819055506000600b819055506000600981905550565b600061080073ffffffffffffffffffffffffffffffffffffffff1663b6039895327fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60006040518463ffffffff1660e01b815260040161275d9392919061484a565b6020604051808303816000875af115801561277c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a091906148c0565b9050806127e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127d990614939565b60405180910390fd5b600061080173ffffffffffffffffffffffffffffffffffffffff16637a9841ed3260016040518363ffffffff1660e01b8152600401612822929190614959565b6020604051808303816000875af1158015612841573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061286591906148c0565b9050806128a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161289e906149d5565b60405180910390fd5b5050565b60116020528060005260406000206000915090508060000154908060010154908060020180546128da90613b8f565b80601f016020809104026020016040519081016040528092919081815260200182805461290690613b8f565b80156129535780601f1061292857610100808354040283529160200191612953565b820191906000526020600020905b81548152906001019060200180831161293657829003601f168201915b5050505050905083565b80600e600084815260200190815260200160002060010190816129809190613ed8565b505050565b6060600060055467ffffffffffffffff8111156129a5576129a46131a0565b5b6040519080825280602002602001820160405280156129d857816020015b60608152602001906001900390816129c35790505b50905060005b600554811015612ab857600c60008281526020019081526020016000206001018054612a0990613b8f565b80601f0160208091040260200160405190810160405280929190818152602001828054612a3590613b8f565b8015612a825780601f10612a5757610100808354040283529160200191612a82565b820191906000526020600020905b815481529060010190602001808311612a6557829003601f168201915b5050505050828281518110612a9a57612a99613bc0565b5b60200260200101819052508080612ab090613bef565b9150506129de565b508091505090565b80600d60008481526020019081526020016000206001019081612ae39190613ed8565b505050565b600060405180606001604052808481526020018381526020016040518060400160405280600581526020017f46616c7365000000000000000000000000000000000000000000000000000000815250815250600c600060055481526020019081526020016000206000820151816000019081612b649190613ed8565b506020820151816001019081612b7a9190613ed8565b506040820151816002019081612b909190613ed8565b5090505060056000815480929190612ba790613bef565b9190505550600554905092915050565b60075481565b600060405180606001604052808481526020018581526020016000815250600e60006007548152602001908152602001600020600082015181600001556020820151816001019081612c0f9190613ed8565b506040820151816002015590505060076000815480929190612c3090613bef565b919050555060005b8251811015612c9557612c6a600754600854858481518110612c5d57612c5c613bc0565b5b6020026020010151612dfc565b60086000815480929190612c7d90613bef565b91905055508080612c8d90613bef565b915050612c38565b5060075490509392505050565b6060600d60008381526020019081526020016000206001018054612cc590613b8f565b80601f0160208091040260200160405190810160405280929190818152602001828054612cf190613b8f565b8015612d3e5780601f10612d1357610100808354040283529160200191612d3e565b820191906000526020600020905b815481529060010190602001808311612d2157829003601f168201915b50505050509050919050565b600f602052806000526040600020600091509050806000015490806001015490806002018054612d7990613b8f565b80601f0160208091040260200160405190810160405280929190818152602001828054612da590613b8f565b8015612df25780601f10612dc757610100808354040283529160200191612df2565b820191906000526020600020905b815481529060010190602001808311612dd557829003601f168201915b5050505050905083565b604051806060016040528084815260200183815260200182815250600f600084815260200190815260200160002060008201518160000155602082015181600101556040820151816002019081612e539190613ed8565b50905050505050565b508054612e6890613b8f565b6000825580601f10612e7a5750612e99565b601f016020900490600052602060002090810190612e989190612e9c565b5b50565b5b80821115612eb5576000816000905550600101612e9d565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b612ee081612ecd565b8114612eeb57600080fd5b50565b600081359050612efd81612ed7565b92915050565b60008060408385031215612f1a57612f19612ec3565b5b6000612f2885828601612eee565b9250506020612f3985828601612eee565b9150509250929050565b600060208284031215612f5957612f58612ec3565b5b6000612f6784828501612eee565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612fd6578082015181840152602081019050612fbb565b60008484015250505050565b6000601f19601f8301169050919050565b6000612ffe82612f9c565b6130088185612fa7565b9350613018818560208601612fb8565b61302181612fe2565b840191505092915050565b60006130388383612ff3565b905092915050565b6000602082019050919050565b600061305882612f70565b6130628185612f7b565b93508360208202850161307485612f8c565b8060005b858110156130b05784840389528151613091858261302c565b945061309c83613040565b925060208a01995050600181019050613078565b50829750879550505050505092915050565b600060208201905081810360008301526130dc818461304d565b905092915050565b6130ed81612ecd565b82525050565b600060208201905061310860008301846130e4565b92915050565b600082825260208201905092915050565b600061312a82612f9c565b613134818561310e565b9350613144818560208601612fb8565b61314d81612fe2565b840191505092915050565b600060608201905061316d60008301866130e4565b61317a60208301856130e4565b818103604083015261318c818461311f565b9050949350505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6131d882612fe2565b810181811067ffffffffffffffff821117156131f7576131f66131a0565b5b80604052505050565b600061320a612eb9565b905061321682826131cf565b919050565b600067ffffffffffffffff821115613236576132356131a0565b5b61323f82612fe2565b9050602081019050919050565b82818337600083830152505050565b600061326e6132698461321b565b613200565b90508281526020810184848401111561328a5761328961319b565b5b61329584828561324c565b509392505050565b600082601f8301126132b2576132b1613196565b5b81356132c284826020860161325b565b91505092915050565b6000602082840312156132e1576132e0612ec3565b5b600082013567ffffffffffffffff8111156132ff576132fe612ec8565b5b61330b8482850161329d565b91505092915050565b6000606082019050818103600083015261332e818661311f565b90508181036020830152613342818561311f565b90508181036040830152613356818461311f565b9050949350505050565b6000806040838503121561337757613376612ec3565b5b600061338585828601612eee565b925050602083013567ffffffffffffffff8111156133a6576133a5612ec8565b5b6133b28582860161329d565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60008160070b9050919050565b6133fe816133e8565b82525050565b61340d81612ecd565b82525050565b60808201600082015161342960008501826133f5565b50602082015161343c60208501826133f5565b50604082015161344f6040850182613404565b5060608201516134626060850182613404565b50505050565b60006134748383613413565b60808301905092915050565b6000602082019050919050565b6000613498826133bc565b6134a281856133c7565b93506134ad836133d8565b8060005b838110156134de5781516134c58882613468565b97506134d083613480565b9250506001810190506134b1565b5085935050505092915050565b60006020820190508181036000830152613505818461348d565b905092915050565b600060608201905061352260008301866130e4565b8181036020830152613534818561311f565b905061354360408301846130e4565b949350505050565b60006020820190508181036000830152613565818461311f565b905092915050565b6000806040838503121561358457613583612ec3565b5b600083013567ffffffffffffffff8111156135a2576135a1612ec8565b5b6135ae8582860161329d565b92505060206135bf85828601612eee565b9150509250929050565b60006040820190506135de60008301856130e4565b81810360208301526135f0818461311f565b90509392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006136318383613404565b60208301905092915050565b6000602082019050919050565b6000613655826135f9565b61365f8185613604565b935061366a83613615565b8060005b8381101561369b5781516136828882613625565b975061368d8361363d565b92505060018101905061366e565b5085935050505092915050565b600060208201905081810360008301526136c2818461364a565b905092915050565b6000806000606084860312156136e3576136e2612ec3565b5b60006136f186828701612eee565b935050602061370286828701612eee565b925050604084013567ffffffffffffffff81111561372357613722612ec8565b5b61372f8682870161329d565b9150509250925092565b60008060006060848603121561375257613751612ec3565b5b600061376086828701612eee565b935050602084013567ffffffffffffffff81111561378157613780612ec8565b5b61378d8682870161329d565b925050604084013567ffffffffffffffff8111156137ae576137ad612ec8565b5b6137ba8682870161329d565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060ff82169050919050565b613806816137f0565b82525050565b600060608301600083015184820360008601526138298282612ff3565b915050602083015161383e6020860182613404565b50604083015161385160408601826137fd565b508091505092915050565b6000613868838361380c565b905092915050565b6000602082019050919050565b6000613888826137c4565b61389281856137cf565b9350836020820285016138a4856137e0565b8060005b858110156138e057848403895281516138c1858261385c565b94506138cc83613870565b925060208a019950506001810190506138a8565b50829750879550505050505092915050565b6000602082019050818103600083015261390c818461387d565b905092915050565b6000806040838503121561392b5761392a612ec3565b5b600083013567ffffffffffffffff81111561394957613948612ec8565b5b6139558582860161329d565b925050602083013567ffffffffffffffff81111561397657613975612ec8565b5b6139828582860161329d565b9150509250929050565b600067ffffffffffffffff8211156139a7576139a66131a0565b5b602082029050602081019050919050565b600080fd5b60006139d06139cb8461398c565b613200565b905080838252602082019050602084028301858111156139f3576139f26139b8565b5b835b81811015613a3a57803567ffffffffffffffff811115613a1857613a17613196565b5b808601613a25898261329d565b855260208501945050506020810190506139f5565b5050509392505050565b600082601f830112613a5957613a58613196565b5b8135613a698482602086016139bd565b91505092915050565b600080600060608486031215613a8b57613a8a612ec3565b5b600084013567ffffffffffffffff811115613aa957613aa8612ec8565b5b613ab58682870161329d565b9350506020613ac686828701612eee565b925050604084013567ffffffffffffffff811115613ae757613ae6612ec8565b5b613af386828701613a44565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613b3782612ecd565b9150613b4283612ecd565b9250828201905080821115613b5a57613b59613afd565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613ba757607f821691505b602082108103613bba57613bb9613b60565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613bfa82612ecd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613c2c57613c2b613afd565b5b600182019050919050565b600081905092915050565b50565b6000613c52600083613c37565b9150613c5d82613c42565b600082019050919050565b6000613c7382613c45565b9150819050919050565b60008190508160005260206000209050919050565b60008154613c9f81613b8f565b613ca98186613c37565b94506001821660008114613cc45760018114613cd957613d0c565b60ff1983168652811515820286019350613d0c565b613ce285613c7d565b60005b83811015613d0457815481890152600182019150602081019050613ce5565b838801955050505b50505092915050565b6000613d218284613c92565b915081905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613d8e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613d51565b613d988683613d51565b95508019841693508086168417925050509392505050565b6000819050919050565b6000613dd5613dd0613dcb84612ecd565b613db0565b612ecd565b9050919050565b6000819050919050565b613def83613dba565b613e03613dfb82613ddc565b848454613d5e565b825550505050565b600090565b613e18613e0b565b613e23818484613de6565b505050565b5b81811015613e4757613e3c600082613e10565b600181019050613e29565b5050565b601f821115613e8c57613e5d81613d2c565b613e6684613d41565b81016020851015613e75578190505b613e89613e8185613d41565b830182613e28565b50505b505050565b600082821c905092915050565b6000613eaf60001984600802613e91565b1980831691505092915050565b6000613ec88383613e9e565b9150826002028217905092915050565b613ee182612f9c565b67ffffffffffffffff811115613efa57613ef96131a0565b5b613f048254613b8f565b613f0f828285613e4b565b600060209050601f831160018114613f425760008415613f30578287015190505b613f3a8582613ebc565b865550613fa2565b601f198416613f5086613d2c565b60005b82811015613f7857848901518255600182019150602085019450602081019050613f53565b86831015613f955784890151613f91601f891682613e9e565b8355505b6001600288020188555050505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613fd582613faa565b9050919050565b613fe581613fca565b82525050565b60008154613ff881613b8f565b614002818661310e565b9450600182166000811461401d576001811461403357614066565b60ff198316865281151560200286019350614066565b61403c85613d2c565b60005b8381101561405e5781548189015260018201915060208101905061403f565b808801955050505b50505092915050565b60006040820190506140846000830185613fdc565b81810360208301526140968184613feb565b90509392505050565b600067ffffffffffffffff8211156140ba576140b96131a0565b5b602082029050602081019050919050565b600080fd5b600080fd5b6140de816133e8565b81146140e957600080fd5b50565b6000815190506140fb816140d5565b92915050565b60008151905061411081612ed7565b92915050565b60006080828403121561412c5761412b6140cb565b5b6141366080613200565b90506000614146848285016140ec565b600083015250602061415a848285016140ec565b602083015250604061416e84828501614101565b604083015250606061418284828501614101565b60608301525092915050565b60006141a161419c8461409f565b613200565b905080838252602082019050608084028301858111156141c4576141c36139b8565b5b835b818110156141ed57806141d98882614116565b8452602084019350506080810190506141c6565b5050509392505050565b600082601f83011261420c5761420b613196565b5b815161421c84826020860161418e565b91505092915050565b60006020828403121561423b5761423a612ec3565b5b600082015167ffffffffffffffff81111561425957614258612ec8565b5b614265848285016141f7565b91505092915050565b600061428161427c8461321b565b613200565b90508281526020810184848401111561429d5761429c61319b565b5b6142a8848285612fb8565b509392505050565b600082601f8301126142c5576142c4613196565b5b81516142d584826020860161426e565b91505092915050565b6000604082840312156142f4576142f36140cb565b5b6142fe6040613200565b9050600082015167ffffffffffffffff81111561431e5761431d6140d0565b5b61432a848285016142b0565b600083015250602061433e84828501614101565b60208301525092915050565b6000806040838503121561436157614360612ec3565b5b600061436f85828601614101565b925050602083015167ffffffffffffffff8111156143905761438f612ec8565b5b61439c858286016142de565b9150509250929050565b600067ffffffffffffffff8211156143c1576143c06131a0565b5b602082029050602081019050919050565b60006143e56143e0846143a6565b613200565b90508083825260208201905060208402830185811115614408576144076139b8565b5b835b8181101561444f57805167ffffffffffffffff81111561442d5761442c613196565b5b80860161443a89826142de565b8552602085019450505060208101905061440a565b5050509392505050565b600082601f83011261446e5761446d613196565b5b815161447e8482602086016143d2565b91505092915050565b60006020828403121561449d5761449c612ec3565b5b600082015167ffffffffffffffff8111156144bb576144ba612ec8565b5b6144c784828501614459565b91505092915050565b60006060820190506144e56000830186613fdc565b81810360208301526144f78185613feb565b905061450660408301846130e4565b949350505050565b60006020828403121561452457614523612ec3565b5b6000614532848285016140ec565b91505092915050565b600067ffffffffffffffff821115614556576145556131a0565b5b602082029050602081019050919050565b614570816137f0565b811461457b57600080fd5b50565b60008151905061458d81614567565b92915050565b6000606082840312156145a9576145a86140cb565b5b6145b36060613200565b9050600082015167ffffffffffffffff8111156145d3576145d26140d0565b5b6145df848285016142b0565b60008301525060206145f384828501614101565b60208301525060406146078482850161457e565b60408301525092915050565b60006146266146218461453b565b613200565b90508083825260208201905060208402830185811115614649576146486139b8565b5b835b8181101561469057805167ffffffffffffffff81111561466e5761466d613196565b5b80860161467b8982614593565b8552602085019450505060208101905061464b565b5050509392505050565b600082601f8301126146af576146ae613196565b5b81516146bf848260208601614613565b91505092915050565b6000602082840312156146de576146dd612ec3565b5b600082015167ffffffffffffffff8111156146fc576146fb612ec8565b5b6147088482850161469a565b91505092915050565b600081549050919050565b60008190508160005260206000209050919050565b6000815461473e81613b8f565b6147488186612fa7565b945060018216600081146147635760018114614779576147ac565b60ff1983168652811515602002860193506147ac565b61478285613d2c565b60005b838110156147a457815481890152600182019150602081019050614785565b808801955050505b50505092915050565b60006147c18383614731565b905092915050565b6000600182019050919050565b60006147e182614711565b6147eb8185612f7b565b9350836020820285016147fd8561471c565b8060005b858110156148385784840389528161481985826147b5565b9450614824836147c9565b925060208a01995050600181019050614801565b50829750879550505050505092915050565b600060608201905061485f6000830186613fdc565b61486c60208301856130e4565b818103604083015261487e81846147d6565b9050949350505050565b60008115159050919050565b61489d81614888565b81146148a857600080fd5b50565b6000815190506148ba81614894565b92915050565b6000602082840312156148d6576148d5612ec3565b5b60006148e4848285016148ab565b91505092915050565b7f5374616b696e6720417070726f7665206661696c656400000000000000000000600082015250565b600061492360168361310e565b915061492e826148ed565b602082019050919050565b6000602082019050818103600083015261495281614916565b9050919050565b600060408201905061496e6000830185613fdc565b818103602083015261498081846147d6565b90509392505050565b7f446973747269627574696f6e20417070726f7665206661696c65640000000000600082015250565b60006149bf601b8361310e565b91506149ca82614989565b602082019050919050565b600060208201905081810360008301526149ee816149b2565b905091905056fea2646970667358221220d55721b5d9a50ad0201a19dfe32c7eca381a4ee4d4c390256db97ada705bc5b064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_approveRequiredMsgs()": {
        "details": "approves the staking and distribution contracts for donating"
      }
    },
    "stateVariables": {
      "donated": {
        "details": "map to keep track of user deposits to the contract."
      },
      "stakingMethods": {
        "details": "the required authorizations for Staking and Distribution"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1259,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "stakingMethods",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 1264,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "distributionMethods",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 1269,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "donated",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1271,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_total_delegations",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1274,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_validatorAddr",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 1276,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_dao_ids",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1278,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_goal_ids",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1280,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_ideas_ids",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1282,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_smart_contract_ids",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1284,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_ideas_vote_ids",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1286,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_message_ids",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1288,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_reply_ids",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1293,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_dao_uris",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(dao_uri_struct)1211_storage)"
      },
      {
        "astId": 1298,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_goal_uris",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(goal_uri_struct)1216_storage)"
      },
      {
        "astId": 1303,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_ideas_uris",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(ideas_uri_struct)1223_storage)"
      },
      {
        "astId": 1308,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_smart_contracts_uris",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_struct(smart_contract_uri_struct)1230_storage)"
      },
      {
        "astId": 1313,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "all_goal_ideas_votes",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_struct(goal_ideas_votes_struct)1237_storage)"
      },
      {
        "astId": 1318,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "all_messages",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_struct(message_struct)1244_storage)"
      },
      {
        "astId": 1323,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "all_replies",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_struct(reply_struct)1251_storage)"
      }
    ],
    "types": {
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_struct(dao_uri_struct)1211_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GreenDAO.dao_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(dao_uri_struct)1211_storage"
      },
      "t_mapping(t_uint256,t_struct(goal_ideas_votes_struct)1237_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GreenDAO.goal_ideas_votes_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(goal_ideas_votes_struct)1237_storage"
      },
      "t_mapping(t_uint256,t_struct(goal_uri_struct)1216_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GreenDAO.goal_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(goal_uri_struct)1216_storage"
      },
      "t_mapping(t_uint256,t_struct(ideas_uri_struct)1223_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GreenDAO.ideas_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(ideas_uri_struct)1223_storage"
      },
      "t_mapping(t_uint256,t_struct(message_struct)1244_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GreenDAO.message_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(message_struct)1244_storage"
      },
      "t_mapping(t_uint256,t_struct(reply_struct)1251_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GreenDAO.reply_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(reply_struct)1251_storage"
      },
      "t_mapping(t_uint256,t_struct(smart_contract_uri_struct)1230_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GreenDAO.smart_contract_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(smart_contract_uri_struct)1230_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(dao_uri_struct)1211_storage": {
        "encoding": "inplace",
        "label": "struct GreenDAO.dao_uri_struct",
        "members": [
          {
            "astId": 1206,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "dao_wallet",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1208,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "dao_uri",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1210,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "finished",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(goal_ideas_votes_struct)1237_storage": {
        "encoding": "inplace",
        "label": "struct GreenDAO.goal_ideas_votes_struct",
        "members": [
          {
            "astId": 1232,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "goal_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1234,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "ideas_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1236,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "wallet",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(goal_uri_struct)1216_storage": {
        "encoding": "inplace",
        "label": "struct GreenDAO.goal_uri_struct",
        "members": [
          {
            "astId": 1213,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "dao_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1215,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "goal_uri",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ideas_uri_struct)1223_storage": {
        "encoding": "inplace",
        "label": "struct GreenDAO.ideas_uri_struct",
        "members": [
          {
            "astId": 1218,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "goal_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1220,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "ideas_uri",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1222,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "donation",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(message_struct)1244_storage": {
        "encoding": "inplace",
        "label": "struct GreenDAO.message_struct",
        "members": [
          {
            "astId": 1239,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "message_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1241,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "ideas_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1243,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "message",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(reply_struct)1251_storage": {
        "encoding": "inplace",
        "label": "struct GreenDAO.reply_struct",
        "members": [
          {
            "astId": 1246,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "reply_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1248,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "message_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1250,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "message",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(smart_contract_uri_struct)1230_storage": {
        "encoding": "inplace",
        "label": "struct GreenDAO.smart_contract_uri_struct",
        "members": [
          {
            "astId": 1225,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "smart_contract_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1227,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "ideas_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1229,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "smart_contract_uri",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}